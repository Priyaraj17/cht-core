{
  "locales": [
    {
      "code": "en",
      "name": "English"
    },
    {
      "code": "es",
      "name": "Español (Spanish)"
    },
    {
      "code": "fr",
      "name": "Français (French)"
    },
    {
      "code": "ne",
      "name": "नेपाली (Nepali)"
    },
    {
      "code": "sw",
      "name": "Kiswahili (Swahili)"
    }
  ],
  "locale": "en",
  "locale_outgoing": "en",
  "date_format": "D MMM, YYYY",
  "reported_date_format": "DD-MMM-YYYY HH:mm:ss",
  "forms_only_mode": false,
  "place_hierarchy_types": [
    "district_hospital",
    "health_center"
  ],
  "default_responses": {
    "start_date": ""
  },
  "district_admins_access_unallocated_messages": false,
  "public_access": false,
  "default_country_code": 1,
  "gateway_number": "+13125551212",
  "dhis_data_sets": [
    {
      "id": "VMuFODsyWaO",
      "translation_key": "dhis.dataset.monthly.integration"
    }
  ],
  "schedule_morning_hours": 0,
  "schedule_morning_minutes": 0,
  "schedule_evening_hours": 23,
  "schedule_evening_minutes": 0,
  "synthetic_date": "",
  "contact_display_short": "clinic.name",
  "roles": {
    "data_entry": {
      "name": "usertype.data-entry"
    },
    "analytics": {
      "name": "usertype.analytics"
    },
    "gateway": {
      "name": "usertype.gateway"
    },
    "program_officer": {
      "name": "usertype.program-officer"
    },
    "crfo": {
      "name": "usertype.crfo"
    },
    "chw_supervisor": {
      "name": "usertype.chw-supervisor",
      "offline": true
    },
    "chw": {
      "name": "usertype.chw",
      "offline": true
    }
  },
  "permissions": {
    "can_access_gateway_api": [
      "gateway"
    ],
    "can_bulk_delete_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_configure": [
      "program_officer",
      "crfo"
    ],
    "can_create_people": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_create_places": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_create_records": [
      "data_entry",
      "gateway",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_create_users": [
      "program_officer"
    ],
    "can_delete_contacts": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_delete_messages": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_delete_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_delete_users": [
      "program_officer"
    ],
    "can_edit": [
      "gateway",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_edit_profile": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_edit_verification": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_export_all": [
      "program_officer",
      "crfo"
    ],
    "can_export_contacts": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_export_feedback": [
      "program_officer"
    ],
    "can_export_messages": [
      "analytics",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_log_out_on_android": [],
    "can_update_places": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_update_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_update_users": [
      "program_officer"
    ],
    "can_export_dhis": [
      "national_admin",
      "crfo"
    ],
    "can_verify_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_analytics": [
      "analytics",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_analytics_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_call_action": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_contacts": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_contacts_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_last_visited_date": [],
    "can_view_message_action": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_messages": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_messages_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_outgoing_messages": [
      "program_officer"
    ],
    "can_view_reports": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_reports_tab": [
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_tasks": [
      "chw_supervisor",
      "chw"
    ],
    "can_view_tasks_tab": [
      "chw_supervisor",
      "chw"
    ],
    "can_view_unallocated_data_records": [
      "gateway",
      "program_officer",
      "chw_supervisor",
      "chw"
    ],
    "can_view_users": [
      "program_officer"
    ],
    "can_write_wealth_quintiles": [],
    "can_aggregate_targets": [
      "chw_supervisor"
    ]
  },
  "changes_controller": {
    "reiterate_changes": true,
    "changes_limit": 100,
    "debounce_interval": 200
  },
  "uhc": {
    "contacts_default_sort": "",
    "visit_count": {
      "month_start_date": 1,
      "visit_count_goal": 0
    }
  },
  "death_reporting": {
    "mark_deceased_forms": [
      "death_report"
    ],
    "date_field": "fields.death_details.date_of_death",
    "undo_deceased_forms": [
      "undo_death_report"
    ]
  },
  "contact_types": [
    {
      "id": "district_hospital",
      "name_key": "contact.type.district_hospital",
      "group_key": "contact.type.district_hospital.plural",
      "create_key": "contact.type.district_hospital.new",
      "edit_key": "contact.type.place.edit",
      "icon": "medic-district-hospital",
      "create_form": "form:contact:district_hospital:create",
      "edit_form": "form:contact:district_hospital:edit"
    },
    {
      "id": "health_center",
      "name_key": "contact.type.health_center",
      "group_key": "contact.type.health_center.plural",
      "create_key": "contact.type.health_center.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "district_hospital"
      ],
      "icon": "medic-health-center",
      "create_form": "form:contact:health_center:create",
      "edit_form": "form:contact:health_center:edit"
    },
    {
      "id": "clinic",
      "name_key": "contact.type.clinic",
      "group_key": "contact.type.clinic.plural",
      "create_key": "contact.type.clinic.new",
      "edit_key": "contact.type.place.edit",
      "parents": [
        "health_center"
      ],
      "icon": "medic-clinic",
      "create_form": "form:contact:clinic:create",
      "edit_form": "form:contact:clinic:edit",
      "count_visits": true
    },
    {
      "id": "person",
      "name_key": "contact.type.person",
      "group_key": "contact.type.person.plural",
      "create_key": "contact.type.person.new",
      "edit_key": "contact.type.person.edit",
      "primary_contact_key": "clinic.field.contact",
      "parents": [
        "district_hospital",
        "health_center",
        "clinic"
      ],
      "icon": "medic-person",
      "create_form": "form:contact:person:create",
      "edit_form": "form:contact:person:edit",
      "person": true
    }
  ],
  "setup_complete": true,
  "contact_summary": "var ContactSummary = {}; (function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(ContactSummary, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js\n\n;(function (global, factory) {\n     true ? module.exports = factory() :\n    undefined\n}(this, (function () { 'use strict';\n\n    var hookCallback;\n\n    function hooks () {\n        return hookCallback.apply(null, arguments);\n    }\n\n    // This is done to register the method called with moment()\n    // without creating circular dependencies.\n    function setHookCallback (callback) {\n        hookCallback = callback;\n    }\n\n    function isArray(input) {\n        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';\n    }\n\n    function isObject(input) {\n        // IE8 will treat undefined and null as object if it wasn't for\n        // input != null\n        return input != null && Object.prototype.toString.call(input) === '[object Object]';\n    }\n\n    function isObjectEmpty(obj) {\n        if (Object.getOwnPropertyNames) {\n            return (Object.getOwnPropertyNames(obj).length === 0);\n        } else {\n            var k;\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    function isUndefined(input) {\n        return input === void 0;\n    }\n\n    function isNumber(input) {\n        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';\n    }\n\n    function isDate(input) {\n        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';\n    }\n\n    function map(arr, fn) {\n        var res = [], i;\n        for (i = 0; i < arr.length; ++i) {\n            res.push(fn(arr[i], i));\n        }\n        return res;\n    }\n\n    function hasOwnProp(a, b) {\n        return Object.prototype.hasOwnProperty.call(a, b);\n    }\n\n    function extend(a, b) {\n        for (var i in b) {\n            if (hasOwnProp(b, i)) {\n                a[i] = b[i];\n            }\n        }\n\n        if (hasOwnProp(b, 'toString')) {\n            a.toString = b.toString;\n        }\n\n        if (hasOwnProp(b, 'valueOf')) {\n            a.valueOf = b.valueOf;\n        }\n\n        return a;\n    }\n\n    function createUTC (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, true).utc();\n    }\n\n    function defaultParsingFlags() {\n        // We need to deep clone this object.\n        return {\n            empty           : false,\n            unusedTokens    : [],\n            unusedInput     : [],\n            overflow        : -2,\n            charsLeftOver   : 0,\n            nullInput       : false,\n            invalidMonth    : null,\n            invalidFormat   : false,\n            userInvalidated : false,\n            iso             : false,\n            parsedDateParts : [],\n            meridiem        : null,\n            rfc2822         : false,\n            weekdayMismatch : false\n        };\n    }\n\n    function getParsingFlags(m) {\n        if (m._pf == null) {\n            m._pf = defaultParsingFlags();\n        }\n        return m._pf;\n    }\n\n    var some;\n    if (Array.prototype.some) {\n        some = Array.prototype.some;\n    } else {\n        some = function (fun) {\n            var t = Object(this);\n            var len = t.length >>> 0;\n\n            for (var i = 0; i < len; i++) {\n                if (i in t && fun.call(this, t[i], i, t)) {\n                    return true;\n                }\n            }\n\n            return false;\n        };\n    }\n\n    function isValid(m) {\n        if (m._isValid == null) {\n            var flags = getParsingFlags(m);\n            var parsedParts = some.call(flags.parsedDateParts, function (i) {\n                return i != null;\n            });\n            var isNowValid = !isNaN(m._d.getTime()) &&\n                flags.overflow < 0 &&\n                !flags.empty &&\n                !flags.invalidMonth &&\n                !flags.invalidWeekday &&\n                !flags.weekdayMismatch &&\n                !flags.nullInput &&\n                !flags.invalidFormat &&\n                !flags.userInvalidated &&\n                (!flags.meridiem || (flags.meridiem && parsedParts));\n\n            if (m._strict) {\n                isNowValid = isNowValid &&\n                    flags.charsLeftOver === 0 &&\n                    flags.unusedTokens.length === 0 &&\n                    flags.bigHour === undefined;\n            }\n\n            if (Object.isFrozen == null || !Object.isFrozen(m)) {\n                m._isValid = isNowValid;\n            }\n            else {\n                return isNowValid;\n            }\n        }\n        return m._isValid;\n    }\n\n    function createInvalid (flags) {\n        var m = createUTC(NaN);\n        if (flags != null) {\n            extend(getParsingFlags(m), flags);\n        }\n        else {\n            getParsingFlags(m).userInvalidated = true;\n        }\n\n        return m;\n    }\n\n    // Plugins that add properties should also add the key here (null value),\n    // so we can properly clone ourselves.\n    var momentProperties = hooks.momentProperties = [];\n\n    function copyConfig(to, from) {\n        var i, prop, val;\n\n        if (!isUndefined(from._isAMomentObject)) {\n            to._isAMomentObject = from._isAMomentObject;\n        }\n        if (!isUndefined(from._i)) {\n            to._i = from._i;\n        }\n        if (!isUndefined(from._f)) {\n            to._f = from._f;\n        }\n        if (!isUndefined(from._l)) {\n            to._l = from._l;\n        }\n        if (!isUndefined(from._strict)) {\n            to._strict = from._strict;\n        }\n        if (!isUndefined(from._tzm)) {\n            to._tzm = from._tzm;\n        }\n        if (!isUndefined(from._isUTC)) {\n            to._isUTC = from._isUTC;\n        }\n        if (!isUndefined(from._offset)) {\n            to._offset = from._offset;\n        }\n        if (!isUndefined(from._pf)) {\n            to._pf = getParsingFlags(from);\n        }\n        if (!isUndefined(from._locale)) {\n            to._locale = from._locale;\n        }\n\n        if (momentProperties.length > 0) {\n            for (i = 0; i < momentProperties.length; i++) {\n                prop = momentProperties[i];\n                val = from[prop];\n                if (!isUndefined(val)) {\n                    to[prop] = val;\n                }\n            }\n        }\n\n        return to;\n    }\n\n    var updateInProgress = false;\n\n    // Moment prototype object\n    function Moment(config) {\n        copyConfig(this, config);\n        this._d = new Date(config._d != null ? config._d.getTime() : NaN);\n        if (!this.isValid()) {\n            this._d = new Date(NaN);\n        }\n        // Prevent infinite loop in case updateOffset creates new moment\n        // objects.\n        if (updateInProgress === false) {\n            updateInProgress = true;\n            hooks.updateOffset(this);\n            updateInProgress = false;\n        }\n    }\n\n    function isMoment (obj) {\n        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);\n    }\n\n    function absFloor (number) {\n        if (number < 0) {\n            // -0 -> 0\n            return Math.ceil(number) || 0;\n        } else {\n            return Math.floor(number);\n        }\n    }\n\n    function toInt(argumentForCoercion) {\n        var coercedNumber = +argumentForCoercion,\n            value = 0;\n\n        if (coercedNumber !== 0 && isFinite(coercedNumber)) {\n            value = absFloor(coercedNumber);\n        }\n\n        return value;\n    }\n\n    // compare two arrays, return the number of differences\n    function compareArrays(array1, array2, dontConvert) {\n        var len = Math.min(array1.length, array2.length),\n            lengthDiff = Math.abs(array1.length - array2.length),\n            diffs = 0,\n            i;\n        for (i = 0; i < len; i++) {\n            if ((dontConvert && array1[i] !== array2[i]) ||\n                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {\n                diffs++;\n            }\n        }\n        return diffs + lengthDiff;\n    }\n\n    function warn(msg) {\n        if (hooks.suppressDeprecationWarnings === false &&\n                (typeof console !==  'undefined') && console.warn) {\n            console.warn('Deprecation warning: ' + msg);\n        }\n    }\n\n    function deprecate(msg, fn) {\n        var firstTime = true;\n\n        return extend(function () {\n            if (hooks.deprecationHandler != null) {\n                hooks.deprecationHandler(null, msg);\n            }\n            if (firstTime) {\n                var args = [];\n                var arg;\n                for (var i = 0; i < arguments.length; i++) {\n                    arg = '';\n                    if (typeof arguments[i] === 'object') {\n                        arg += '\\n[' + i + '] ';\n                        for (var key in arguments[0]) {\n                            arg += key + ': ' + arguments[0][key] + ', ';\n                        }\n                        arg = arg.slice(0, -2); // Remove trailing comma and space\n                    } else {\n                        arg = arguments[i];\n                    }\n                    args.push(arg);\n                }\n                warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);\n                firstTime = false;\n            }\n            return fn.apply(this, arguments);\n        }, fn);\n    }\n\n    var deprecations = {};\n\n    function deprecateSimple(name, msg) {\n        if (hooks.deprecationHandler != null) {\n            hooks.deprecationHandler(name, msg);\n        }\n        if (!deprecations[name]) {\n            warn(msg);\n            deprecations[name] = true;\n        }\n    }\n\n    hooks.suppressDeprecationWarnings = false;\n    hooks.deprecationHandler = null;\n\n    function isFunction(input) {\n        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';\n    }\n\n    function set (config) {\n        var prop, i;\n        for (i in config) {\n            prop = config[i];\n            if (isFunction(prop)) {\n                this[i] = prop;\n            } else {\n                this['_' + i] = prop;\n            }\n        }\n        this._config = config;\n        // Lenient ordinal parsing accepts just a number in addition to\n        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        this._dayOfMonthOrdinalParseLenient = new RegExp(\n            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +\n                '|' + (/\\d{1,2}/).source);\n    }\n\n    function mergeConfigs(parentConfig, childConfig) {\n        var res = extend({}, parentConfig), prop;\n        for (prop in childConfig) {\n            if (hasOwnProp(childConfig, prop)) {\n                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {\n                    res[prop] = {};\n                    extend(res[prop], parentConfig[prop]);\n                    extend(res[prop], childConfig[prop]);\n                } else if (childConfig[prop] != null) {\n                    res[prop] = childConfig[prop];\n                } else {\n                    delete res[prop];\n                }\n            }\n        }\n        for (prop in parentConfig) {\n            if (hasOwnProp(parentConfig, prop) &&\n                    !hasOwnProp(childConfig, prop) &&\n                    isObject(parentConfig[prop])) {\n                // make sure changes to properties don't modify parent config\n                res[prop] = extend({}, res[prop]);\n            }\n        }\n        return res;\n    }\n\n    function Locale(config) {\n        if (config != null) {\n            this.set(config);\n        }\n    }\n\n    var keys;\n\n    if (Object.keys) {\n        keys = Object.keys;\n    } else {\n        keys = function (obj) {\n            var i, res = [];\n            for (i in obj) {\n                if (hasOwnProp(obj, i)) {\n                    res.push(i);\n                }\n            }\n            return res;\n        };\n    }\n\n    var defaultCalendar = {\n        sameDay : '[Today at] LT',\n        nextDay : '[Tomorrow at] LT',\n        nextWeek : 'dddd [at] LT',\n        lastDay : '[Yesterday at] LT',\n        lastWeek : '[Last] dddd [at] LT',\n        sameElse : 'L'\n    };\n\n    function calendar (key, mom, now) {\n        var output = this._calendar[key] || this._calendar['sameElse'];\n        return isFunction(output) ? output.call(mom, now) : output;\n    }\n\n    var defaultLongDateFormat = {\n        LTS  : 'h:mm:ss A',\n        LT   : 'h:mm A',\n        L    : 'MM/DD/YYYY',\n        LL   : 'MMMM D, YYYY',\n        LLL  : 'MMMM D, YYYY h:mm A',\n        LLLL : 'dddd, MMMM D, YYYY h:mm A'\n    };\n\n    function longDateFormat (key) {\n        var format = this._longDateFormat[key],\n            formatUpper = this._longDateFormat[key.toUpperCase()];\n\n        if (format || !formatUpper) {\n            return format;\n        }\n\n        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {\n            return val.slice(1);\n        });\n\n        return this._longDateFormat[key];\n    }\n\n    var defaultInvalidDate = 'Invalid date';\n\n    function invalidDate () {\n        return this._invalidDate;\n    }\n\n    var defaultOrdinal = '%d';\n    var defaultDayOfMonthOrdinalParse = /\\d{1,2}/;\n\n    function ordinal (number) {\n        return this._ordinal.replace('%d', number);\n    }\n\n    var defaultRelativeTime = {\n        future : 'in %s',\n        past   : '%s ago',\n        s  : 'a few seconds',\n        ss : '%d seconds',\n        m  : 'a minute',\n        mm : '%d minutes',\n        h  : 'an hour',\n        hh : '%d hours',\n        d  : 'a day',\n        dd : '%d days',\n        M  : 'a month',\n        MM : '%d months',\n        y  : 'a year',\n        yy : '%d years'\n    };\n\n    function relativeTime (number, withoutSuffix, string, isFuture) {\n        var output = this._relativeTime[string];\n        return (isFunction(output)) ?\n            output(number, withoutSuffix, string, isFuture) :\n            output.replace(/%d/i, number);\n    }\n\n    function pastFuture (diff, output) {\n        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];\n        return isFunction(format) ? format(output) : format.replace(/%s/i, output);\n    }\n\n    var aliases = {};\n\n    function addUnitAlias (unit, shorthand) {\n        var lowerCase = unit.toLowerCase();\n        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;\n    }\n\n    function normalizeUnits(units) {\n        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;\n    }\n\n    function normalizeObjectUnits(inputObject) {\n        var normalizedInput = {},\n            normalizedProp,\n            prop;\n\n        for (prop in inputObject) {\n            if (hasOwnProp(inputObject, prop)) {\n                normalizedProp = normalizeUnits(prop);\n                if (normalizedProp) {\n                    normalizedInput[normalizedProp] = inputObject[prop];\n                }\n            }\n        }\n\n        return normalizedInput;\n    }\n\n    var priorities = {};\n\n    function addUnitPriority(unit, priority) {\n        priorities[unit] = priority;\n    }\n\n    function getPrioritizedUnits(unitsObj) {\n        var units = [];\n        for (var u in unitsObj) {\n            units.push({unit: u, priority: priorities[u]});\n        }\n        units.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        return units;\n    }\n\n    function zeroFill(number, targetLength, forceSign) {\n        var absNumber = '' + Math.abs(number),\n            zerosToFill = targetLength - absNumber.length,\n            sign = number >= 0;\n        return (sign ? (forceSign ? '+' : '') : '-') +\n            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;\n    }\n\n    var formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n\n    var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;\n\n    var formatFunctions = {};\n\n    var formatTokenFunctions = {};\n\n    // token:    'M'\n    // padded:   ['MM', 2]\n    // ordinal:  'Mo'\n    // callback: function () { this.month() + 1 }\n    function addFormatToken (token, padded, ordinal, callback) {\n        var func = callback;\n        if (typeof callback === 'string') {\n            func = function () {\n                return this[callback]();\n            };\n        }\n        if (token) {\n            formatTokenFunctions[token] = func;\n        }\n        if (padded) {\n            formatTokenFunctions[padded[0]] = function () {\n                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);\n            };\n        }\n        if (ordinal) {\n            formatTokenFunctions[ordinal] = function () {\n                return this.localeData().ordinal(func.apply(this, arguments), token);\n            };\n        }\n    }\n\n    function removeFormattingTokens(input) {\n        if (input.match(/\\[[\\s\\S]/)) {\n            return input.replace(/^\\[|\\]$/g, '');\n        }\n        return input.replace(/\\\\/g, '');\n    }\n\n    function makeFormatFunction(format) {\n        var array = format.match(formattingTokens), i, length;\n\n        for (i = 0, length = array.length; i < length; i++) {\n            if (formatTokenFunctions[array[i]]) {\n                array[i] = formatTokenFunctions[array[i]];\n            } else {\n                array[i] = removeFormattingTokens(array[i]);\n            }\n        }\n\n        return function (mom) {\n            var output = '', i;\n            for (i = 0; i < length; i++) {\n                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];\n            }\n            return output;\n        };\n    }\n\n    // format date using native date object\n    function formatMoment(m, format) {\n        if (!m.isValid()) {\n            return m.localeData().invalidDate();\n        }\n\n        format = expandFormat(format, m.localeData());\n        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);\n\n        return formatFunctions[format](m);\n    }\n\n    function expandFormat(format, locale) {\n        var i = 5;\n\n        function replaceLongDateFormatTokens(input) {\n            return locale.longDateFormat(input) || input;\n        }\n\n        localFormattingTokens.lastIndex = 0;\n        while (i >= 0 && localFormattingTokens.test(format)) {\n            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);\n            localFormattingTokens.lastIndex = 0;\n            i -= 1;\n        }\n\n        return format;\n    }\n\n    var match1         = /\\d/;            //       0 - 9\n    var match2         = /\\d\\d/;          //      00 - 99\n    var match3         = /\\d{3}/;         //     000 - 999\n    var match4         = /\\d{4}/;         //    0000 - 9999\n    var match6         = /[+-]?\\d{6}/;    // -999999 - 999999\n    var match1to2      = /\\d\\d?/;         //       0 - 99\n    var match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999\n    var match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999\n    var match1to3      = /\\d{1,3}/;       //       0 - 999\n    var match1to4      = /\\d{1,4}/;       //       0 - 9999\n    var match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999\n\n    var matchUnsigned  = /\\d+/;           //       0 - inf\n    var matchSigned    = /[+-]?\\d+/;      //    -inf - inf\n\n    var matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z\n    var matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z\n\n    var matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123\n\n    // any word (or two) characters or numbers including two/three word month in arabic.\n    // includes scottish gaelic two word and hyphenated months\n    var matchWord = /[0-9]{0,256}['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFF07\\uFF10-\\uFFEF]{1,256}|[\\u0600-\\u06FF\\/]{1,256}(\\s*?[\\u0600-\\u06FF]{1,256}){1,2}/i;\n\n    var regexes = {};\n\n    function addRegexToken (token, regex, strictRegex) {\n        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {\n            return (isStrict && strictRegex) ? strictRegex : regex;\n        };\n    }\n\n    function getParseRegexForToken (token, config) {\n        if (!hasOwnProp(regexes, token)) {\n            return new RegExp(unescapeFormat(token));\n        }\n\n        return regexes[token](config._strict, config._locale);\n    }\n\n    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\n    function unescapeFormat(s) {\n        return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n            return p1 || p2 || p3 || p4;\n        }));\n    }\n\n    function regexEscape(s) {\n        return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    }\n\n    var tokens = {};\n\n    function addParseToken (token, callback) {\n        var i, func = callback;\n        if (typeof token === 'string') {\n            token = [token];\n        }\n        if (isNumber(callback)) {\n            func = function (input, array) {\n                array[callback] = toInt(input);\n            };\n        }\n        for (i = 0; i < token.length; i++) {\n            tokens[token[i]] = func;\n        }\n    }\n\n    function addWeekParseToken (token, callback) {\n        addParseToken(token, function (input, array, config, token) {\n            config._w = config._w || {};\n            callback(input, config._w, config, token);\n        });\n    }\n\n    function addTimeToArrayFromToken(token, input, config) {\n        if (input != null && hasOwnProp(tokens, token)) {\n            tokens[token](input, config._a, config, token);\n        }\n    }\n\n    var YEAR = 0;\n    var MONTH = 1;\n    var DATE = 2;\n    var HOUR = 3;\n    var MINUTE = 4;\n    var SECOND = 5;\n    var MILLISECOND = 6;\n    var WEEK = 7;\n    var WEEKDAY = 8;\n\n    // FORMATTING\n\n    addFormatToken('Y', 0, 0, function () {\n        var y = this.year();\n        return y <= 9999 ? '' + y : '+' + y;\n    });\n\n    addFormatToken(0, ['YY', 2], 0, function () {\n        return this.year() % 100;\n    });\n\n    addFormatToken(0, ['YYYY',   4],       0, 'year');\n    addFormatToken(0, ['YYYYY',  5],       0, 'year');\n    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');\n\n    // ALIASES\n\n    addUnitAlias('year', 'y');\n\n    // PRIORITIES\n\n    addUnitPriority('year', 1);\n\n    // PARSING\n\n    addRegexToken('Y',      matchSigned);\n    addRegexToken('YY',     match1to2, match2);\n    addRegexToken('YYYY',   match1to4, match4);\n    addRegexToken('YYYYY',  match1to6, match6);\n    addRegexToken('YYYYYY', match1to6, match6);\n\n    addParseToken(['YYYYY', 'YYYYYY'], YEAR);\n    addParseToken('YYYY', function (input, array) {\n        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);\n    });\n    addParseToken('YY', function (input, array) {\n        array[YEAR] = hooks.parseTwoDigitYear(input);\n    });\n    addParseToken('Y', function (input, array) {\n        array[YEAR] = parseInt(input, 10);\n    });\n\n    // HELPERS\n\n    function daysInYear(year) {\n        return isLeapYear(year) ? 366 : 365;\n    }\n\n    function isLeapYear(year) {\n        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n    }\n\n    // HOOKS\n\n    hooks.parseTwoDigitYear = function (input) {\n        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);\n    };\n\n    // MOMENTS\n\n    var getSetYear = makeGetSet('FullYear', true);\n\n    function getIsLeapYear () {\n        return isLeapYear(this.year());\n    }\n\n    function makeGetSet (unit, keepTime) {\n        return function (value) {\n            if (value != null) {\n                set$1(this, unit, value);\n                hooks.updateOffset(this, keepTime);\n                return this;\n            } else {\n                return get(this, unit);\n            }\n        };\n    }\n\n    function get (mom, unit) {\n        return mom.isValid() ?\n            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;\n    }\n\n    function set$1 (mom, unit, value) {\n        if (mom.isValid() && !isNaN(value)) {\n            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));\n            }\n            else {\n                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function stringGet (units) {\n        units = normalizeUnits(units);\n        if (isFunction(this[units])) {\n            return this[units]();\n        }\n        return this;\n    }\n\n\n    function stringSet (units, value) {\n        if (typeof units === 'object') {\n            units = normalizeObjectUnits(units);\n            var prioritized = getPrioritizedUnits(units);\n            for (var i = 0; i < prioritized.length; i++) {\n                this[prioritized[i].unit](units[prioritized[i].unit]);\n            }\n        } else {\n            units = normalizeUnits(units);\n            if (isFunction(this[units])) {\n                return this[units](value);\n            }\n        }\n        return this;\n    }\n\n    function mod(n, x) {\n        return ((n % x) + x) % x;\n    }\n\n    var indexOf;\n\n    if (Array.prototype.indexOf) {\n        indexOf = Array.prototype.indexOf;\n    } else {\n        indexOf = function (o) {\n            // I know\n            var i;\n            for (i = 0; i < this.length; ++i) {\n                if (this[i] === o) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    function daysInMonth(year, month) {\n        if (isNaN(year) || isNaN(month)) {\n            return NaN;\n        }\n        var modMonth = mod(month, 12);\n        year += (month - modMonth) / 12;\n        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);\n    }\n\n    // FORMATTING\n\n    addFormatToken('M', ['MM', 2], 'Mo', function () {\n        return this.month() + 1;\n    });\n\n    addFormatToken('MMM', 0, 0, function (format) {\n        return this.localeData().monthsShort(this, format);\n    });\n\n    addFormatToken('MMMM', 0, 0, function (format) {\n        return this.localeData().months(this, format);\n    });\n\n    // ALIASES\n\n    addUnitAlias('month', 'M');\n\n    // PRIORITY\n\n    addUnitPriority('month', 8);\n\n    // PARSING\n\n    addRegexToken('M',    match1to2);\n    addRegexToken('MM',   match1to2, match2);\n    addRegexToken('MMM',  function (isStrict, locale) {\n        return locale.monthsShortRegex(isStrict);\n    });\n    addRegexToken('MMMM', function (isStrict, locale) {\n        return locale.monthsRegex(isStrict);\n    });\n\n    addParseToken(['M', 'MM'], function (input, array) {\n        array[MONTH] = toInt(input) - 1;\n    });\n\n    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {\n        var month = config._locale.monthsParse(input, token, config._strict);\n        // if we didn't find a month name, mark the date as invalid.\n        if (month != null) {\n            array[MONTH] = month;\n        } else {\n            getParsingFlags(config).invalidMonth = input;\n        }\n    });\n\n    // LOCALES\n\n    var MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;\n    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\n    function localeMonths (m, format) {\n        if (!m) {\n            return isArray(this._months) ? this._months :\n                this._months['standalone'];\n        }\n        return isArray(this._months) ? this._months[m.month()] :\n            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');\n    function localeMonthsShort (m, format) {\n        if (!m) {\n            return isArray(this._monthsShort) ? this._monthsShort :\n                this._monthsShort['standalone'];\n        }\n        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :\n            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];\n    }\n\n    function handleStrictParse(monthName, format, strict) {\n        var i, ii, mom, llc = monthName.toLocaleLowerCase();\n        if (!this._monthsParse) {\n            // this is not used\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n            for (i = 0; i < 12; ++i) {\n                mom = createUTC([2000, i]);\n                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();\n                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'MMM') {\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._longMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._longMonthsParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortMonthsParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeMonthsParse (monthName, format, strict) {\n        var i, mom, regex;\n\n        if (this._monthsParseExact) {\n            return handleStrictParse.call(this, monthName, format, strict);\n        }\n\n        if (!this._monthsParse) {\n            this._monthsParse = [];\n            this._longMonthsParse = [];\n            this._shortMonthsParse = [];\n        }\n\n        // TODO: add sorting\n        // Sorting makes sure if one month (or abbr) is a prefix of another\n        // see sorting in computeMonthsParse\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            if (strict && !this._longMonthsParse[i]) {\n                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');\n                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');\n            }\n            if (!strict && !this._monthsParse[i]) {\n                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');\n                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {\n                return i;\n            } else if (!strict && this._monthsParse[i].test(monthName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function setMonth (mom, value) {\n        var dayOfMonth;\n\n        if (!mom.isValid()) {\n            // No op\n            return mom;\n        }\n\n        if (typeof value === 'string') {\n            if (/^\\d+$/.test(value)) {\n                value = toInt(value);\n            } else {\n                value = mom.localeData().monthsParse(value);\n                // TODO: Another silent failure?\n                if (!isNumber(value)) {\n                    return mom;\n                }\n            }\n        }\n\n        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));\n        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);\n        return mom;\n    }\n\n    function getSetMonth (value) {\n        if (value != null) {\n            setMonth(this, value);\n            hooks.updateOffset(this, true);\n            return this;\n        } else {\n            return get(this, 'Month');\n        }\n    }\n\n    function getDaysInMonth () {\n        return daysInMonth(this.year(), this.month());\n    }\n\n    var defaultMonthsShortRegex = matchWord;\n    function monthsShortRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsShortStrictRegex;\n            } else {\n                return this._monthsShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsShortRegex')) {\n                this._monthsShortRegex = defaultMonthsShortRegex;\n            }\n            return this._monthsShortStrictRegex && isStrict ?\n                this._monthsShortStrictRegex : this._monthsShortRegex;\n        }\n    }\n\n    var defaultMonthsRegex = matchWord;\n    function monthsRegex (isStrict) {\n        if (this._monthsParseExact) {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                computeMonthsParse.call(this);\n            }\n            if (isStrict) {\n                return this._monthsStrictRegex;\n            } else {\n                return this._monthsRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_monthsRegex')) {\n                this._monthsRegex = defaultMonthsRegex;\n            }\n            return this._monthsStrictRegex && isStrict ?\n                this._monthsStrictRegex : this._monthsRegex;\n        }\n    }\n\n    function computeMonthsParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom;\n        for (i = 0; i < 12; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, i]);\n            shortPieces.push(this.monthsShort(mom, ''));\n            longPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.months(mom, ''));\n            mixedPieces.push(this.monthsShort(mom, ''));\n        }\n        // Sorting makes sure if one month (or abbr) is a prefix of another it\n        // will match the longer piece.\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 12; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n        }\n        for (i = 0; i < 24; i++) {\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._monthsShortRegex = this._monthsRegex;\n        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n    }\n\n    function createDate (y, m, d, h, M, s, ms) {\n        // can't just apply() to create a date:\n        // https://stackoverflow.com/q/181348\n        var date;\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            date = new Date(y + 400, m, d, h, M, s, ms);\n            if (isFinite(date.getFullYear())) {\n                date.setFullYear(y);\n            }\n        } else {\n            date = new Date(y, m, d, h, M, s, ms);\n        }\n\n        return date;\n    }\n\n    function createUTCDate (y) {\n        var date;\n        // the Date.UTC function remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            var args = Array.prototype.slice.call(arguments);\n            // preserve leap years using a full 400 year cycle, then reset\n            args[0] = y + 400;\n            date = new Date(Date.UTC.apply(null, args));\n            if (isFinite(date.getUTCFullYear())) {\n                date.setUTCFullYear(y);\n            }\n        } else {\n            date = new Date(Date.UTC.apply(null, arguments));\n        }\n\n        return date;\n    }\n\n    // start-of-first-week - start-of-year\n    function firstWeekOffset(year, dow, doy) {\n        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)\n            fwd = 7 + dow - doy,\n            // first-week day local weekday -- which local weekday is fwd\n            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;\n\n        return -fwdlw + fwd - 1;\n    }\n\n    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday\n    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {\n        var localWeekday = (7 + weekday - dow) % 7,\n            weekOffset = firstWeekOffset(year, dow, doy),\n            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,\n            resYear, resDayOfYear;\n\n        if (dayOfYear <= 0) {\n            resYear = year - 1;\n            resDayOfYear = daysInYear(resYear) + dayOfYear;\n        } else if (dayOfYear > daysInYear(year)) {\n            resYear = year + 1;\n            resDayOfYear = dayOfYear - daysInYear(year);\n        } else {\n            resYear = year;\n            resDayOfYear = dayOfYear;\n        }\n\n        return {\n            year: resYear,\n            dayOfYear: resDayOfYear\n        };\n    }\n\n    function weekOfYear(mom, dow, doy) {\n        var weekOffset = firstWeekOffset(mom.year(), dow, doy),\n            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,\n            resWeek, resYear;\n\n        if (week < 1) {\n            resYear = mom.year() - 1;\n            resWeek = week + weeksInYear(resYear, dow, doy);\n        } else if (week > weeksInYear(mom.year(), dow, doy)) {\n            resWeek = week - weeksInYear(mom.year(), dow, doy);\n            resYear = mom.year() + 1;\n        } else {\n            resYear = mom.year();\n            resWeek = week;\n        }\n\n        return {\n            week: resWeek,\n            year: resYear\n        };\n    }\n\n    function weeksInYear(year, dow, doy) {\n        var weekOffset = firstWeekOffset(year, dow, doy),\n            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);\n        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;\n    }\n\n    // FORMATTING\n\n    addFormatToken('w', ['ww', 2], 'wo', 'week');\n    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');\n\n    // ALIASES\n\n    addUnitAlias('week', 'w');\n    addUnitAlias('isoWeek', 'W');\n\n    // PRIORITIES\n\n    addUnitPriority('week', 5);\n    addUnitPriority('isoWeek', 5);\n\n    // PARSING\n\n    addRegexToken('w',  match1to2);\n    addRegexToken('ww', match1to2, match2);\n    addRegexToken('W',  match1to2);\n    addRegexToken('WW', match1to2, match2);\n\n    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {\n        week[token.substr(0, 1)] = toInt(input);\n    });\n\n    // HELPERS\n\n    // LOCALES\n\n    function localeWeek (mom) {\n        return weekOfYear(mom, this._week.dow, this._week.doy).week;\n    }\n\n    var defaultLocaleWeek = {\n        dow : 0, // Sunday is the first day of the week.\n        doy : 6  // The week that contains Jan 6th is the first week of the year.\n    };\n\n    function localeFirstDayOfWeek () {\n        return this._week.dow;\n    }\n\n    function localeFirstDayOfYear () {\n        return this._week.doy;\n    }\n\n    // MOMENTS\n\n    function getSetWeek (input) {\n        var week = this.localeData().week(this);\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    function getSetISOWeek (input) {\n        var week = weekOfYear(this, 1, 4).week;\n        return input == null ? week : this.add((input - week) * 7, 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('d', 0, 'do', 'day');\n\n    addFormatToken('dd', 0, 0, function (format) {\n        return this.localeData().weekdaysMin(this, format);\n    });\n\n    addFormatToken('ddd', 0, 0, function (format) {\n        return this.localeData().weekdaysShort(this, format);\n    });\n\n    addFormatToken('dddd', 0, 0, function (format) {\n        return this.localeData().weekdays(this, format);\n    });\n\n    addFormatToken('e', 0, 0, 'weekday');\n    addFormatToken('E', 0, 0, 'isoWeekday');\n\n    // ALIASES\n\n    addUnitAlias('day', 'd');\n    addUnitAlias('weekday', 'e');\n    addUnitAlias('isoWeekday', 'E');\n\n    // PRIORITY\n    addUnitPriority('day', 11);\n    addUnitPriority('weekday', 11);\n    addUnitPriority('isoWeekday', 11);\n\n    // PARSING\n\n    addRegexToken('d',    match1to2);\n    addRegexToken('e',    match1to2);\n    addRegexToken('E',    match1to2);\n    addRegexToken('dd',   function (isStrict, locale) {\n        return locale.weekdaysMinRegex(isStrict);\n    });\n    addRegexToken('ddd',   function (isStrict, locale) {\n        return locale.weekdaysShortRegex(isStrict);\n    });\n    addRegexToken('dddd',   function (isStrict, locale) {\n        return locale.weekdaysRegex(isStrict);\n    });\n\n    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {\n        var weekday = config._locale.weekdaysParse(input, token, config._strict);\n        // if we didn't get a weekday name, mark the date as invalid\n        if (weekday != null) {\n            week.d = weekday;\n        } else {\n            getParsingFlags(config).invalidWeekday = input;\n        }\n    });\n\n    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {\n        week[token] = toInt(input);\n    });\n\n    // HELPERS\n\n    function parseWeekday(input, locale) {\n        if (typeof input !== 'string') {\n            return input;\n        }\n\n        if (!isNaN(input)) {\n            return parseInt(input, 10);\n        }\n\n        input = locale.weekdaysParse(input);\n        if (typeof input === 'number') {\n            return input;\n        }\n\n        return null;\n    }\n\n    function parseIsoWeekday(input, locale) {\n        if (typeof input === 'string') {\n            return locale.weekdaysParse(input) % 7 || 7;\n        }\n        return isNaN(input) ? null : input;\n    }\n\n    // LOCALES\n    function shiftWeekdays (ws, n) {\n        return ws.slice(n, 7).concat(ws.slice(0, n));\n    }\n\n    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');\n    function localeWeekdays (m, format) {\n        var weekdays = isArray(this._weekdays) ? this._weekdays :\n            this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];\n        return (m === true) ? shiftWeekdays(weekdays, this._week.dow)\n            : (m) ? weekdays[m.day()] : weekdays;\n    }\n\n    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');\n    function localeWeekdaysShort (m) {\n        return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)\n            : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;\n    }\n\n    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');\n    function localeWeekdaysMin (m) {\n        return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)\n            : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;\n    }\n\n    function handleStrictParse$1(weekdayName, format, strict) {\n        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._minWeekdaysParse = [];\n\n            for (i = 0; i < 7; ++i) {\n                mom = createUTC([2000, 1]).day(i);\n                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();\n                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();\n                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();\n            }\n        }\n\n        if (strict) {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        } else {\n            if (format === 'dddd') {\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else if (format === 'ddd') {\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            } else {\n                ii = indexOf.call(this._minWeekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._weekdaysParse, llc);\n                if (ii !== -1) {\n                    return ii;\n                }\n                ii = indexOf.call(this._shortWeekdaysParse, llc);\n                return ii !== -1 ? ii : null;\n            }\n        }\n    }\n\n    function localeWeekdaysParse (weekdayName, format, strict) {\n        var i, mom, regex;\n\n        if (this._weekdaysParseExact) {\n            return handleStrictParse$1.call(this, weekdayName, format, strict);\n        }\n\n        if (!this._weekdaysParse) {\n            this._weekdaysParse = [];\n            this._minWeekdaysParse = [];\n            this._shortWeekdaysParse = [];\n            this._fullWeekdaysParse = [];\n        }\n\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n\n            mom = createUTC([2000, 1]).day(i);\n            if (strict && !this._fullWeekdaysParse[i]) {\n                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\\\.?') + '$', 'i');\n                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\\\.?') + '$', 'i');\n            }\n            if (!this._weekdaysParse[i]) {\n                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');\n            }\n            // test the regex\n            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {\n                return i;\n            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {\n                return i;\n            }\n        }\n    }\n\n    // MOMENTS\n\n    function getSetDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();\n        if (input != null) {\n            input = parseWeekday(input, this.localeData());\n            return this.add(input - day, 'd');\n        } else {\n            return day;\n        }\n    }\n\n    function getSetLocaleDayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;\n        return input == null ? weekday : this.add(input - weekday, 'd');\n    }\n\n    function getSetISODayOfWeek (input) {\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n\n        // behaves the same as moment#day except\n        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)\n        // as a setter, sunday should belong to the previous week.\n\n        if (input != null) {\n            var weekday = parseIsoWeekday(input, this.localeData());\n            return this.day(this.day() % 7 ? weekday : weekday - 7);\n        } else {\n            return this.day() || 7;\n        }\n    }\n\n    var defaultWeekdaysRegex = matchWord;\n    function weekdaysRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysStrictRegex;\n            } else {\n                return this._weekdaysRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                this._weekdaysRegex = defaultWeekdaysRegex;\n            }\n            return this._weekdaysStrictRegex && isStrict ?\n                this._weekdaysStrictRegex : this._weekdaysRegex;\n        }\n    }\n\n    var defaultWeekdaysShortRegex = matchWord;\n    function weekdaysShortRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysShortStrictRegex;\n            } else {\n                return this._weekdaysShortRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysShortRegex')) {\n                this._weekdaysShortRegex = defaultWeekdaysShortRegex;\n            }\n            return this._weekdaysShortStrictRegex && isStrict ?\n                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;\n        }\n    }\n\n    var defaultWeekdaysMinRegex = matchWord;\n    function weekdaysMinRegex (isStrict) {\n        if (this._weekdaysParseExact) {\n            if (!hasOwnProp(this, '_weekdaysRegex')) {\n                computeWeekdaysParse.call(this);\n            }\n            if (isStrict) {\n                return this._weekdaysMinStrictRegex;\n            } else {\n                return this._weekdaysMinRegex;\n            }\n        } else {\n            if (!hasOwnProp(this, '_weekdaysMinRegex')) {\n                this._weekdaysMinRegex = defaultWeekdaysMinRegex;\n            }\n            return this._weekdaysMinStrictRegex && isStrict ?\n                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;\n        }\n    }\n\n\n    function computeWeekdaysParse () {\n        function cmpLenRev(a, b) {\n            return b.length - a.length;\n        }\n\n        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],\n            i, mom, minp, shortp, longp;\n        for (i = 0; i < 7; i++) {\n            // make the regex if we don't have it already\n            mom = createUTC([2000, 1]).day(i);\n            minp = this.weekdaysMin(mom, '');\n            shortp = this.weekdaysShort(mom, '');\n            longp = this.weekdays(mom, '');\n            minPieces.push(minp);\n            shortPieces.push(shortp);\n            longPieces.push(longp);\n            mixedPieces.push(minp);\n            mixedPieces.push(shortp);\n            mixedPieces.push(longp);\n        }\n        // Sorting makes sure if one weekday (or abbr) is a prefix of another it\n        // will match the longer piece.\n        minPieces.sort(cmpLenRev);\n        shortPieces.sort(cmpLenRev);\n        longPieces.sort(cmpLenRev);\n        mixedPieces.sort(cmpLenRev);\n        for (i = 0; i < 7; i++) {\n            shortPieces[i] = regexEscape(shortPieces[i]);\n            longPieces[i] = regexEscape(longPieces[i]);\n            mixedPieces[i] = regexEscape(mixedPieces[i]);\n        }\n\n        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');\n        this._weekdaysShortRegex = this._weekdaysRegex;\n        this._weekdaysMinRegex = this._weekdaysRegex;\n\n        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');\n        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');\n        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');\n    }\n\n    // FORMATTING\n\n    function hFormat() {\n        return this.hours() % 12 || 12;\n    }\n\n    function kFormat() {\n        return this.hours() || 24;\n    }\n\n    addFormatToken('H', ['HH', 2], 0, 'hour');\n    addFormatToken('h', ['hh', 2], 0, hFormat);\n    addFormatToken('k', ['kk', 2], 0, kFormat);\n\n    addFormatToken('hmm', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('hmmss', 0, 0, function () {\n        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    addFormatToken('Hmm', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2);\n    });\n\n    addFormatToken('Hmmss', 0, 0, function () {\n        return '' + this.hours() + zeroFill(this.minutes(), 2) +\n            zeroFill(this.seconds(), 2);\n    });\n\n    function meridiem (token, lowercase) {\n        addFormatToken(token, 0, 0, function () {\n            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);\n        });\n    }\n\n    meridiem('a', true);\n    meridiem('A', false);\n\n    // ALIASES\n\n    addUnitAlias('hour', 'h');\n\n    // PRIORITY\n    addUnitPriority('hour', 13);\n\n    // PARSING\n\n    function matchMeridiem (isStrict, locale) {\n        return locale._meridiemParse;\n    }\n\n    addRegexToken('a',  matchMeridiem);\n    addRegexToken('A',  matchMeridiem);\n    addRegexToken('H',  match1to2);\n    addRegexToken('h',  match1to2);\n    addRegexToken('k',  match1to2);\n    addRegexToken('HH', match1to2, match2);\n    addRegexToken('hh', match1to2, match2);\n    addRegexToken('kk', match1to2, match2);\n\n    addRegexToken('hmm', match3to4);\n    addRegexToken('hmmss', match5to6);\n    addRegexToken('Hmm', match3to4);\n    addRegexToken('Hmmss', match5to6);\n\n    addParseToken(['H', 'HH'], HOUR);\n    addParseToken(['k', 'kk'], function (input, array, config) {\n        var kInput = toInt(input);\n        array[HOUR] = kInput === 24 ? 0 : kInput;\n    });\n    addParseToken(['a', 'A'], function (input, array, config) {\n        config._isPm = config._locale.isPM(input);\n        config._meridiem = input;\n    });\n    addParseToken(['h', 'hh'], function (input, array, config) {\n        array[HOUR] = toInt(input);\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n        getParsingFlags(config).bigHour = true;\n    });\n    addParseToken('Hmm', function (input, array, config) {\n        var pos = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos));\n        array[MINUTE] = toInt(input.substr(pos));\n    });\n    addParseToken('Hmmss', function (input, array, config) {\n        var pos1 = input.length - 4;\n        var pos2 = input.length - 2;\n        array[HOUR] = toInt(input.substr(0, pos1));\n        array[MINUTE] = toInt(input.substr(pos1, 2));\n        array[SECOND] = toInt(input.substr(pos2));\n    });\n\n    // LOCALES\n\n    function localeIsPM (input) {\n        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays\n        // Using charAt should be more compatible.\n        return ((input + '').toLowerCase().charAt(0) === 'p');\n    }\n\n    var defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;\n    function localeMeridiem (hours, minutes, isLower) {\n        if (hours > 11) {\n            return isLower ? 'pm' : 'PM';\n        } else {\n            return isLower ? 'am' : 'AM';\n        }\n    }\n\n\n    // MOMENTS\n\n    // Setting the hour should keep the time, because the user explicitly\n    // specified which hour they want. So trying to maintain the same hour (in\n    // a new timezone) makes sense. Adding/subtracting hours does not follow\n    // this rule.\n    var getSetHour = makeGetSet('Hours', true);\n\n    var baseConfig = {\n        calendar: defaultCalendar,\n        longDateFormat: defaultLongDateFormat,\n        invalidDate: defaultInvalidDate,\n        ordinal: defaultOrdinal,\n        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,\n        relativeTime: defaultRelativeTime,\n\n        months: defaultLocaleMonths,\n        monthsShort: defaultLocaleMonthsShort,\n\n        week: defaultLocaleWeek,\n\n        weekdays: defaultLocaleWeekdays,\n        weekdaysMin: defaultLocaleWeekdaysMin,\n        weekdaysShort: defaultLocaleWeekdaysShort,\n\n        meridiemParse: defaultLocaleMeridiemParse\n    };\n\n    // internal storage for locale config files\n    var locales = {};\n    var localeFamilies = {};\n    var globalLocale;\n\n    function normalizeLocale(key) {\n        return key ? key.toLowerCase().replace('_', '-') : key;\n    }\n\n    // pick the locale from the array\n    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each\n    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\n    function chooseLocale(names) {\n        var i = 0, j, next, locale, split;\n\n        while (i < names.length) {\n            split = normalizeLocale(names[i]).split('-');\n            j = split.length;\n            next = normalizeLocale(names[i + 1]);\n            next = next ? next.split('-') : null;\n            while (j > 0) {\n                locale = loadLocale(split.slice(0, j).join('-'));\n                if (locale) {\n                    return locale;\n                }\n                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {\n                    //the next array item is better than a shallower substring of this one\n                    break;\n                }\n                j--;\n            }\n            i++;\n        }\n        return globalLocale;\n    }\n\n    function loadLocale(name) {\n        var oldLocale = null;\n        // TODO: Find a better way to register and load all the locales in Node\n        if (!locales[name] && (typeof module !== 'undefined') &&\n                module && module.exports) {\n            try {\n                oldLocale = globalLocale._abbr;\n                var aliasedRequire = require;\n                !(function webpackMissingModule() { var e = new Error(\"Cannot find module 'undefined'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n                getSetGlobalLocale(oldLocale);\n            } catch (e) {}\n        }\n        return locales[name];\n    }\n\n    // This function will load locale and then set the global locale.  If\n    // no arguments are passed in, it will simply return the current global\n    // locale key.\n    function getSetGlobalLocale (key, values) {\n        var data;\n        if (key) {\n            if (isUndefined(values)) {\n                data = getLocale(key);\n            }\n            else {\n                data = defineLocale(key, values);\n            }\n\n            if (data) {\n                // moment.duration._locale = moment._locale = data;\n                globalLocale = data;\n            }\n            else {\n                if ((typeof console !==  'undefined') && console.warn) {\n                    //warn user if arguments are passed but the locale could not be set\n                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');\n                }\n            }\n        }\n\n        return globalLocale._abbr;\n    }\n\n    function defineLocale (name, config) {\n        if (config !== null) {\n            var locale, parentConfig = baseConfig;\n            config.abbr = name;\n            if (locales[name] != null) {\n                deprecateSimple('defineLocaleOverride',\n                        'use moment.updateLocale(localeName, config) to change ' +\n                        'an existing locale. moment.defineLocale(localeName, ' +\n                        'config) should only be used for creating a new locale ' +\n                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');\n                parentConfig = locales[name]._config;\n            } else if (config.parentLocale != null) {\n                if (locales[config.parentLocale] != null) {\n                    parentConfig = locales[config.parentLocale]._config;\n                } else {\n                    locale = loadLocale(config.parentLocale);\n                    if (locale != null) {\n                        parentConfig = locale._config;\n                    } else {\n                        if (!localeFamilies[config.parentLocale]) {\n                            localeFamilies[config.parentLocale] = [];\n                        }\n                        localeFamilies[config.parentLocale].push({\n                            name: name,\n                            config: config\n                        });\n                        return null;\n                    }\n                }\n            }\n            locales[name] = new Locale(mergeConfigs(parentConfig, config));\n\n            if (localeFamilies[name]) {\n                localeFamilies[name].forEach(function (x) {\n                    defineLocale(x.name, x.config);\n                });\n            }\n\n            // backwards compat for now: also set the locale\n            // make sure we set the locale AFTER all child locales have been\n            // created, so we won't end up with the child locale set.\n            getSetGlobalLocale(name);\n\n\n            return locales[name];\n        } else {\n            // useful for testing\n            delete locales[name];\n            return null;\n        }\n    }\n\n    function updateLocale(name, config) {\n        if (config != null) {\n            var locale, tmpLocale, parentConfig = baseConfig;\n            // MERGE\n            tmpLocale = loadLocale(name);\n            if (tmpLocale != null) {\n                parentConfig = tmpLocale._config;\n            }\n            config = mergeConfigs(parentConfig, config);\n            locale = new Locale(config);\n            locale.parentLocale = locales[name];\n            locales[name] = locale;\n\n            // backwards compat for now: also set the locale\n            getSetGlobalLocale(name);\n        } else {\n            // pass null for config to unupdate, useful for tests\n            if (locales[name] != null) {\n                if (locales[name].parentLocale != null) {\n                    locales[name] = locales[name].parentLocale;\n                } else if (locales[name] != null) {\n                    delete locales[name];\n                }\n            }\n        }\n        return locales[name];\n    }\n\n    // returns locale data\n    function getLocale (key) {\n        var locale;\n\n        if (key && key._locale && key._locale._abbr) {\n            key = key._locale._abbr;\n        }\n\n        if (!key) {\n            return globalLocale;\n        }\n\n        if (!isArray(key)) {\n            //short-circuit everything else\n            locale = loadLocale(key);\n            if (locale) {\n                return locale;\n            }\n            key = [key];\n        }\n\n        return chooseLocale(key);\n    }\n\n    function listLocales() {\n        return keys(locales);\n    }\n\n    function checkOverflow (m) {\n        var overflow;\n        var a = m._a;\n\n        if (a && getParsingFlags(m).overflow === -2) {\n            overflow =\n                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :\n                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :\n                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :\n                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :\n                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :\n                -1;\n\n            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {\n                overflow = DATE;\n            }\n            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {\n                overflow = WEEK;\n            }\n            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {\n                overflow = WEEKDAY;\n            }\n\n            getParsingFlags(m).overflow = overflow;\n        }\n\n        return m;\n    }\n\n    // Pick the first defined of two or three arguments.\n    function defaults(a, b, c) {\n        if (a != null) {\n            return a;\n        }\n        if (b != null) {\n            return b;\n        }\n        return c;\n    }\n\n    function currentDateArray(config) {\n        // hooks is actually the exported moment object\n        var nowValue = new Date(hooks.now());\n        if (config._useUTC) {\n            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];\n        }\n        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];\n    }\n\n    // convert an array to a date.\n    // the array should mirror the parameters below\n    // note: all values past the year are optional and will default to the lowest possible value.\n    // [year, month, day , hour, minute, second, millisecond]\n    function configFromArray (config) {\n        var i, date, input = [], currentDate, expectedWeekday, yearToUse;\n\n        if (config._d) {\n            return;\n        }\n\n        currentDate = currentDateArray(config);\n\n        //compute day of the year from weeks and weekdays\n        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {\n            dayOfYearFromWeekInfo(config);\n        }\n\n        //if the day of the year is set, figure out what it is\n        if (config._dayOfYear != null) {\n            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);\n\n            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {\n                getParsingFlags(config)._overflowDayOfYear = true;\n            }\n\n            date = createUTCDate(yearToUse, 0, config._dayOfYear);\n            config._a[MONTH] = date.getUTCMonth();\n            config._a[DATE] = date.getUTCDate();\n        }\n\n        // Default to current date.\n        // * if no year, month, day of month are given, default to today\n        // * if day of month is given, default month and year\n        // * if month is given, default only year\n        // * if year is given, don't default anything\n        for (i = 0; i < 3 && config._a[i] == null; ++i) {\n            config._a[i] = input[i] = currentDate[i];\n        }\n\n        // Zero out whatever was not defaulted, including time\n        for (; i < 7; i++) {\n            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];\n        }\n\n        // Check for 24:00:00.000\n        if (config._a[HOUR] === 24 &&\n                config._a[MINUTE] === 0 &&\n                config._a[SECOND] === 0 &&\n                config._a[MILLISECOND] === 0) {\n            config._nextDay = true;\n            config._a[HOUR] = 0;\n        }\n\n        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);\n        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();\n\n        // Apply timezone offset from input. The actual utcOffset can be changed\n        // with parseZone.\n        if (config._tzm != null) {\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n        }\n\n        if (config._nextDay) {\n            config._a[HOUR] = 24;\n        }\n\n        // check for mismatching day of week\n        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {\n            getParsingFlags(config).weekdayMismatch = true;\n        }\n    }\n\n    function dayOfYearFromWeekInfo(config) {\n        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;\n\n        w = config._w;\n        if (w.GG != null || w.W != null || w.E != null) {\n            dow = 1;\n            doy = 4;\n\n            // TODO: We need to take the current isoWeekYear, but that depends on\n            // how we interpret now (local, utc, fixed offset). So create\n            // a now version of current config (take local/utc/offset flags, and\n            // create now).\n            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);\n            week = defaults(w.W, 1);\n            weekday = defaults(w.E, 1);\n            if (weekday < 1 || weekday > 7) {\n                weekdayOverflow = true;\n            }\n        } else {\n            dow = config._locale._week.dow;\n            doy = config._locale._week.doy;\n\n            var curWeek = weekOfYear(createLocal(), dow, doy);\n\n            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);\n\n            // Default to current week.\n            week = defaults(w.w, curWeek.week);\n\n            if (w.d != null) {\n                // weekday -- low day numbers are considered next week\n                weekday = w.d;\n                if (weekday < 0 || weekday > 6) {\n                    weekdayOverflow = true;\n                }\n            } else if (w.e != null) {\n                // local weekday -- counting starts from beginning of week\n                weekday = w.e + dow;\n                if (w.e < 0 || w.e > 6) {\n                    weekdayOverflow = true;\n                }\n            } else {\n                // default to beginning of week\n                weekday = dow;\n            }\n        }\n        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {\n            getParsingFlags(config)._overflowWeeks = true;\n        } else if (weekdayOverflow != null) {\n            getParsingFlags(config)._overflowWeekday = true;\n        } else {\n            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);\n            config._a[YEAR] = temp.year;\n            config._dayOfYear = temp.dayOfYear;\n        }\n    }\n\n    // iso 8601 regex\n    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)\n    var extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n    var basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n\n    var tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;\n\n    var isoDates = [\n        ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],\n        ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],\n        ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],\n        ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],\n        ['YYYY-DDD', /\\d{4}-\\d{3}/],\n        ['YYYY-MM', /\\d{4}-\\d\\d/, false],\n        ['YYYYYYMMDD', /[+-]\\d{10}/],\n        ['YYYYMMDD', /\\d{8}/],\n        // YYYYMM is NOT allowed by the standard\n        ['GGGG[W]WWE', /\\d{4}W\\d{3}/],\n        ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],\n        ['YYYYDDD', /\\d{7}/]\n    ];\n\n    // iso time formats and regexes\n    var isoTimes = [\n        ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],\n        ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],\n        ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],\n        ['HH:mm', /\\d\\d:\\d\\d/],\n        ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],\n        ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],\n        ['HHmmss', /\\d\\d\\d\\d\\d\\d/],\n        ['HHmm', /\\d\\d\\d\\d/],\n        ['HH', /\\d\\d/]\n    ];\n\n    var aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;\n\n    // date from iso format\n    function configFromISO(config) {\n        var i, l,\n            string = config._i,\n            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),\n            allowTime, dateFormat, timeFormat, tzFormat;\n\n        if (match) {\n            getParsingFlags(config).iso = true;\n\n            for (i = 0, l = isoDates.length; i < l; i++) {\n                if (isoDates[i][1].exec(match[1])) {\n                    dateFormat = isoDates[i][0];\n                    allowTime = isoDates[i][2] !== false;\n                    break;\n                }\n            }\n            if (dateFormat == null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[3]) {\n                for (i = 0, l = isoTimes.length; i < l; i++) {\n                    if (isoTimes[i][1].exec(match[3])) {\n                        // match[2] should be 'T' or space\n                        timeFormat = (match[2] || ' ') + isoTimes[i][0];\n                        break;\n                    }\n                }\n                if (timeFormat == null) {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            if (!allowTime && timeFormat != null) {\n                config._isValid = false;\n                return;\n            }\n            if (match[4]) {\n                if (tzRegex.exec(match[4])) {\n                    tzFormat = 'Z';\n                } else {\n                    config._isValid = false;\n                    return;\n                }\n            }\n            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');\n            configFromStringAndFormat(config);\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3\n    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n\n    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n        var result = [\n            untruncateYear(yearStr),\n            defaultLocaleMonthsShort.indexOf(monthStr),\n            parseInt(dayStr, 10),\n            parseInt(hourStr, 10),\n            parseInt(minuteStr, 10)\n        ];\n\n        if (secondStr) {\n            result.push(parseInt(secondStr, 10));\n        }\n\n        return result;\n    }\n\n    function untruncateYear(yearStr) {\n        var year = parseInt(yearStr, 10);\n        if (year <= 49) {\n            return 2000 + year;\n        } else if (year <= 999) {\n            return 1900 + year;\n        }\n        return year;\n    }\n\n    function preprocessRFC2822(s) {\n        // Remove comments and folding whitespace and replace multiple-spaces with a single space\n        return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').replace(/^\\s\\s*/, '').replace(/\\s\\s*$/, '');\n    }\n\n    function checkWeekday(weekdayStr, parsedInput, config) {\n        if (weekdayStr) {\n            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.\n            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),\n                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();\n            if (weekdayProvided !== weekdayActual) {\n                getParsingFlags(config).weekdayMismatch = true;\n                config._isValid = false;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    var obsOffsets = {\n        UT: 0,\n        GMT: 0,\n        EDT: -4 * 60,\n        EST: -5 * 60,\n        CDT: -5 * 60,\n        CST: -6 * 60,\n        MDT: -6 * 60,\n        MST: -7 * 60,\n        PDT: -7 * 60,\n        PST: -8 * 60\n    };\n\n    function calculateOffset(obsOffset, militaryOffset, numOffset) {\n        if (obsOffset) {\n            return obsOffsets[obsOffset];\n        } else if (militaryOffset) {\n            // the only allowed military tz is Z\n            return 0;\n        } else {\n            var hm = parseInt(numOffset, 10);\n            var m = hm % 100, h = (hm - m) / 100;\n            return h * 60 + m;\n        }\n    }\n\n    // date and time from ref 2822 format\n    function configFromRFC2822(config) {\n        var match = rfc2822.exec(preprocessRFC2822(config._i));\n        if (match) {\n            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);\n            if (!checkWeekday(match[1], parsedArray, config)) {\n                return;\n            }\n\n            config._a = parsedArray;\n            config._tzm = calculateOffset(match[8], match[9], match[10]);\n\n            config._d = createUTCDate.apply(null, config._a);\n            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);\n\n            getParsingFlags(config).rfc2822 = true;\n        } else {\n            config._isValid = false;\n        }\n    }\n\n    // date from iso format or fallback\n    function configFromString(config) {\n        var matched = aspNetJsonRegex.exec(config._i);\n\n        if (matched !== null) {\n            config._d = new Date(+matched[1]);\n            return;\n        }\n\n        configFromISO(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        configFromRFC2822(config);\n        if (config._isValid === false) {\n            delete config._isValid;\n        } else {\n            return;\n        }\n\n        // Final attempt, use Input Fallback\n        hooks.createFromInputFallback(config);\n    }\n\n    hooks.createFromInputFallback = deprecate(\n        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +\n        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +\n        'discouraged and will be removed in an upcoming major release. Please refer to ' +\n        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',\n        function (config) {\n            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));\n        }\n    );\n\n    // constant that refers to the ISO standard\n    hooks.ISO_8601 = function () {};\n\n    // constant that refers to the RFC 2822 form\n    hooks.RFC_2822 = function () {};\n\n    // date from string and format string\n    function configFromStringAndFormat(config) {\n        // TODO: Move this to another part of the creation flow to prevent circular deps\n        if (config._f === hooks.ISO_8601) {\n            configFromISO(config);\n            return;\n        }\n        if (config._f === hooks.RFC_2822) {\n            configFromRFC2822(config);\n            return;\n        }\n        config._a = [];\n        getParsingFlags(config).empty = true;\n\n        // This array is used to make a Date, either with `new Date` or `Date.UTC`\n        var string = '' + config._i,\n            i, parsedInput, tokens, token, skipped,\n            stringLength = string.length,\n            totalParsedInputLength = 0;\n\n        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];\n\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];\n            // console.log('token', token, 'parsedInput', parsedInput,\n            //         'regex', getParseRegexForToken(token, config));\n            if (parsedInput) {\n                skipped = string.substr(0, string.indexOf(parsedInput));\n                if (skipped.length > 0) {\n                    getParsingFlags(config).unusedInput.push(skipped);\n                }\n                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);\n                totalParsedInputLength += parsedInput.length;\n            }\n            // don't parse if it's not a known token\n            if (formatTokenFunctions[token]) {\n                if (parsedInput) {\n                    getParsingFlags(config).empty = false;\n                }\n                else {\n                    getParsingFlags(config).unusedTokens.push(token);\n                }\n                addTimeToArrayFromToken(token, parsedInput, config);\n            }\n            else if (config._strict && !parsedInput) {\n                getParsingFlags(config).unusedTokens.push(token);\n            }\n        }\n\n        // add remaining unparsed input length to the string\n        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;\n        if (string.length > 0) {\n            getParsingFlags(config).unusedInput.push(string);\n        }\n\n        // clear _12h flag if hour is <= 12\n        if (config._a[HOUR] <= 12 &&\n            getParsingFlags(config).bigHour === true &&\n            config._a[HOUR] > 0) {\n            getParsingFlags(config).bigHour = undefined;\n        }\n\n        getParsingFlags(config).parsedDateParts = config._a.slice(0);\n        getParsingFlags(config).meridiem = config._meridiem;\n        // handle meridiem\n        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);\n\n        configFromArray(config);\n        checkOverflow(config);\n    }\n\n\n    function meridiemFixWrap (locale, hour, meridiem) {\n        var isPm;\n\n        if (meridiem == null) {\n            // nothing to do\n            return hour;\n        }\n        if (locale.meridiemHour != null) {\n            return locale.meridiemHour(hour, meridiem);\n        } else if (locale.isPM != null) {\n            // Fallback\n            isPm = locale.isPM(meridiem);\n            if (isPm && hour < 12) {\n                hour += 12;\n            }\n            if (!isPm && hour === 12) {\n                hour = 0;\n            }\n            return hour;\n        } else {\n            // this is not supposed to happen\n            return hour;\n        }\n    }\n\n    // date from string and array of format strings\n    function configFromStringAndArray(config) {\n        var tempConfig,\n            bestMoment,\n\n            scoreToBeat,\n            i,\n            currentScore;\n\n        if (config._f.length === 0) {\n            getParsingFlags(config).invalidFormat = true;\n            config._d = new Date(NaN);\n            return;\n        }\n\n        for (i = 0; i < config._f.length; i++) {\n            currentScore = 0;\n            tempConfig = copyConfig({}, config);\n            if (config._useUTC != null) {\n                tempConfig._useUTC = config._useUTC;\n            }\n            tempConfig._f = config._f[i];\n            configFromStringAndFormat(tempConfig);\n\n            if (!isValid(tempConfig)) {\n                continue;\n            }\n\n            // if there is any input that was not parsed add a penalty for that format\n            currentScore += getParsingFlags(tempConfig).charsLeftOver;\n\n            //or tokens\n            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;\n\n            getParsingFlags(tempConfig).score = currentScore;\n\n            if (scoreToBeat == null || currentScore < scoreToBeat) {\n                scoreToBeat = currentScore;\n                bestMoment = tempConfig;\n            }\n        }\n\n        extend(config, bestMoment || tempConfig);\n    }\n\n    function configFromObject(config) {\n        if (config._d) {\n            return;\n        }\n\n        var i = normalizeObjectUnits(config._i);\n        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {\n            return obj && parseInt(obj, 10);\n        });\n\n        configFromArray(config);\n    }\n\n    function createFromConfig (config) {\n        var res = new Moment(checkOverflow(prepareConfig(config)));\n        if (res._nextDay) {\n            // Adding is smart enough around DST\n            res.add(1, 'd');\n            res._nextDay = undefined;\n        }\n\n        return res;\n    }\n\n    function prepareConfig (config) {\n        var input = config._i,\n            format = config._f;\n\n        config._locale = config._locale || getLocale(config._l);\n\n        if (input === null || (format === undefined && input === '')) {\n            return createInvalid({nullInput: true});\n        }\n\n        if (typeof input === 'string') {\n            config._i = input = config._locale.preparse(input);\n        }\n\n        if (isMoment(input)) {\n            return new Moment(checkOverflow(input));\n        } else if (isDate(input)) {\n            config._d = input;\n        } else if (isArray(format)) {\n            configFromStringAndArray(config);\n        } else if (format) {\n            configFromStringAndFormat(config);\n        }  else {\n            configFromInput(config);\n        }\n\n        if (!isValid(config)) {\n            config._d = null;\n        }\n\n        return config;\n    }\n\n    function configFromInput(config) {\n        var input = config._i;\n        if (isUndefined(input)) {\n            config._d = new Date(hooks.now());\n        } else if (isDate(input)) {\n            config._d = new Date(input.valueOf());\n        } else if (typeof input === 'string') {\n            configFromString(config);\n        } else if (isArray(input)) {\n            config._a = map(input.slice(0), function (obj) {\n                return parseInt(obj, 10);\n            });\n            configFromArray(config);\n        } else if (isObject(input)) {\n            configFromObject(config);\n        } else if (isNumber(input)) {\n            // from milliseconds\n            config._d = new Date(input);\n        } else {\n            hooks.createFromInputFallback(config);\n        }\n    }\n\n    function createLocalOrUTC (input, format, locale, strict, isUTC) {\n        var c = {};\n\n        if (locale === true || locale === false) {\n            strict = locale;\n            locale = undefined;\n        }\n\n        if ((isObject(input) && isObjectEmpty(input)) ||\n                (isArray(input) && input.length === 0)) {\n            input = undefined;\n        }\n        // object construction must be done this way.\n        // https://github.com/moment/moment/issues/1423\n        c._isAMomentObject = true;\n        c._useUTC = c._isUTC = isUTC;\n        c._l = locale;\n        c._i = input;\n        c._f = format;\n        c._strict = strict;\n\n        return createFromConfig(c);\n    }\n\n    function createLocal (input, format, locale, strict) {\n        return createLocalOrUTC(input, format, locale, strict, false);\n    }\n\n    var prototypeMin = deprecate(\n        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other < this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    var prototypeMax = deprecate(\n        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',\n        function () {\n            var other = createLocal.apply(null, arguments);\n            if (this.isValid() && other.isValid()) {\n                return other > this ? this : other;\n            } else {\n                return createInvalid();\n            }\n        }\n    );\n\n    // Pick a moment m from moments so that m[fn](other) is true for all\n    // other. This relies on the function fn to be transitive.\n    //\n    // moments should either be an array of moment objects or an array, whose\n    // first element is an array of moment objects.\n    function pickBy(fn, moments) {\n        var res, i;\n        if (moments.length === 1 && isArray(moments[0])) {\n            moments = moments[0];\n        }\n        if (!moments.length) {\n            return createLocal();\n        }\n        res = moments[0];\n        for (i = 1; i < moments.length; ++i) {\n            if (!moments[i].isValid() || moments[i][fn](res)) {\n                res = moments[i];\n            }\n        }\n        return res;\n    }\n\n    // TODO: Use [].sort instead?\n    function min () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isBefore', args);\n    }\n\n    function max () {\n        var args = [].slice.call(arguments, 0);\n\n        return pickBy('isAfter', args);\n    }\n\n    var now = function () {\n        return Date.now ? Date.now() : +(new Date());\n    };\n\n    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\n    function isDurationValid(m) {\n        for (var key in m) {\n            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {\n                return false;\n            }\n        }\n\n        var unitHasDecimal = false;\n        for (var i = 0; i < ordering.length; ++i) {\n            if (m[ordering[i]]) {\n                if (unitHasDecimal) {\n                    return false; // only allow non-integers for smallest unit\n                }\n                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {\n                    unitHasDecimal = true;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    function isValid$1() {\n        return this._isValid;\n    }\n\n    function createInvalid$1() {\n        return createDuration(NaN);\n    }\n\n    function Duration (duration) {\n        var normalizedInput = normalizeObjectUnits(duration),\n            years = normalizedInput.year || 0,\n            quarters = normalizedInput.quarter || 0,\n            months = normalizedInput.month || 0,\n            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,\n            days = normalizedInput.day || 0,\n            hours = normalizedInput.hour || 0,\n            minutes = normalizedInput.minute || 0,\n            seconds = normalizedInput.second || 0,\n            milliseconds = normalizedInput.millisecond || 0;\n\n        this._isValid = isDurationValid(normalizedInput);\n\n        // representation for dateAddRemove\n        this._milliseconds = +milliseconds +\n            seconds * 1e3 + // 1000\n            minutes * 6e4 + // 1000 * 60\n            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n        // Because of dateAddRemove treats 24 hours as different from a\n        // day when working around DST, we need to store them separately\n        this._days = +days +\n            weeks * 7;\n        // It is impossible to translate months into days without knowing\n        // which months you are are talking about, so we have to store\n        // it separately.\n        this._months = +months +\n            quarters * 3 +\n            years * 12;\n\n        this._data = {};\n\n        this._locale = getLocale();\n\n        this._bubble();\n    }\n\n    function isDuration (obj) {\n        return obj instanceof Duration;\n    }\n\n    function absRound (number) {\n        if (number < 0) {\n            return Math.round(-1 * number) * -1;\n        } else {\n            return Math.round(number);\n        }\n    }\n\n    // FORMATTING\n\n    function offset (token, separator) {\n        addFormatToken(token, 0, 0, function () {\n            var offset = this.utcOffset();\n            var sign = '+';\n            if (offset < 0) {\n                offset = -offset;\n                sign = '-';\n            }\n            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);\n        });\n    }\n\n    offset('Z', ':');\n    offset('ZZ', '');\n\n    // PARSING\n\n    addRegexToken('Z',  matchShortOffset);\n    addRegexToken('ZZ', matchShortOffset);\n    addParseToken(['Z', 'ZZ'], function (input, array, config) {\n        config._useUTC = true;\n        config._tzm = offsetFromString(matchShortOffset, input);\n    });\n\n    // HELPERS\n\n    // timezone chunker\n    // '+10:00' > ['10',  '00']\n    // '-1530'  > ['-15', '30']\n    var chunkOffset = /([\\+\\-]|\\d\\d)/gi;\n\n    function offsetFromString(matcher, string) {\n        var matches = (string || '').match(matcher);\n\n        if (matches === null) {\n            return null;\n        }\n\n        var chunk   = matches[matches.length - 1] || [];\n        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];\n        var minutes = +(parts[1] * 60) + toInt(parts[2]);\n\n        return minutes === 0 ?\n          0 :\n          parts[0] === '+' ? minutes : -minutes;\n    }\n\n    // Return a moment from input, that is local/utc/zone equivalent to model.\n    function cloneWithOffset(input, model) {\n        var res, diff;\n        if (model._isUTC) {\n            res = model.clone();\n            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();\n            // Use low-level api, because this fn is low-level api.\n            res._d.setTime(res._d.valueOf() + diff);\n            hooks.updateOffset(res, false);\n            return res;\n        } else {\n            return createLocal(input).local();\n        }\n    }\n\n    function getDateOffset (m) {\n        // On Firefox.24 Date#getTimezoneOffset returns a floating point.\n        // https://github.com/moment/moment/pull/1871\n        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;\n    }\n\n    // HOOKS\n\n    // This function will be called whenever a moment is mutated.\n    // It is intended to keep the offset in sync with the timezone.\n    hooks.updateOffset = function () {};\n\n    // MOMENTS\n\n    // keepLocalTime = true means only change the timezone, without\n    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->\n    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset\n    // +0200, so we adjust the time as needed, to be valid.\n    //\n    // Keeping the time actually adds/subtracts (one hour)\n    // from the actual represented time. That is why we call updateOffset\n    // a second time. In case it wants us to change the offset again\n    // _changeInProgress == true case, then we have to adjust, because\n    // there is no such time in the given timezone.\n    function getSetOffset (input, keepLocalTime, keepMinutes) {\n        var offset = this._offset || 0,\n            localAdjust;\n        if (!this.isValid()) {\n            return input != null ? this : NaN;\n        }\n        if (input != null) {\n            if (typeof input === 'string') {\n                input = offsetFromString(matchShortOffset, input);\n                if (input === null) {\n                    return this;\n                }\n            } else if (Math.abs(input) < 16 && !keepMinutes) {\n                input = input * 60;\n            }\n            if (!this._isUTC && keepLocalTime) {\n                localAdjust = getDateOffset(this);\n            }\n            this._offset = input;\n            this._isUTC = true;\n            if (localAdjust != null) {\n                this.add(localAdjust, 'm');\n            }\n            if (offset !== input) {\n                if (!keepLocalTime || this._changeInProgress) {\n                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);\n                } else if (!this._changeInProgress) {\n                    this._changeInProgress = true;\n                    hooks.updateOffset(this, true);\n                    this._changeInProgress = null;\n                }\n            }\n            return this;\n        } else {\n            return this._isUTC ? offset : getDateOffset(this);\n        }\n    }\n\n    function getSetZone (input, keepLocalTime) {\n        if (input != null) {\n            if (typeof input !== 'string') {\n                input = -input;\n            }\n\n            this.utcOffset(input, keepLocalTime);\n\n            return this;\n        } else {\n            return -this.utcOffset();\n        }\n    }\n\n    function setOffsetToUTC (keepLocalTime) {\n        return this.utcOffset(0, keepLocalTime);\n    }\n\n    function setOffsetToLocal (keepLocalTime) {\n        if (this._isUTC) {\n            this.utcOffset(0, keepLocalTime);\n            this._isUTC = false;\n\n            if (keepLocalTime) {\n                this.subtract(getDateOffset(this), 'm');\n            }\n        }\n        return this;\n    }\n\n    function setOffsetToParsedOffset () {\n        if (this._tzm != null) {\n            this.utcOffset(this._tzm, false, true);\n        } else if (typeof this._i === 'string') {\n            var tZone = offsetFromString(matchOffset, this._i);\n            if (tZone != null) {\n                this.utcOffset(tZone);\n            }\n            else {\n                this.utcOffset(0, true);\n            }\n        }\n        return this;\n    }\n\n    function hasAlignedHourOffset (input) {\n        if (!this.isValid()) {\n            return false;\n        }\n        input = input ? createLocal(input).utcOffset() : 0;\n\n        return (this.utcOffset() - input) % 60 === 0;\n    }\n\n    function isDaylightSavingTime () {\n        return (\n            this.utcOffset() > this.clone().month(0).utcOffset() ||\n            this.utcOffset() > this.clone().month(5).utcOffset()\n        );\n    }\n\n    function isDaylightSavingTimeShifted () {\n        if (!isUndefined(this._isDSTShifted)) {\n            return this._isDSTShifted;\n        }\n\n        var c = {};\n\n        copyConfig(c, this);\n        c = prepareConfig(c);\n\n        if (c._a) {\n            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);\n            this._isDSTShifted = this.isValid() &&\n                compareArrays(c._a, other.toArray()) > 0;\n        } else {\n            this._isDSTShifted = false;\n        }\n\n        return this._isDSTShifted;\n    }\n\n    function isLocal () {\n        return this.isValid() ? !this._isUTC : false;\n    }\n\n    function isUtcOffset () {\n        return this.isValid() ? this._isUTC : false;\n    }\n\n    function isUtc () {\n        return this.isValid() ? this._isUTC && this._offset === 0 : false;\n    }\n\n    // ASP.NET json date format regex\n    var aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;\n\n    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html\n    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere\n    // and further modified to allow for strings containing both week and day\n    var isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n    function createDuration (input, key) {\n        var duration = input,\n            // matching against regexp is expensive, do it on demand\n            match = null,\n            sign,\n            ret,\n            diffRes;\n\n        if (isDuration(input)) {\n            duration = {\n                ms : input._milliseconds,\n                d  : input._days,\n                M  : input._months\n            };\n        } else if (isNumber(input)) {\n            duration = {};\n            if (key) {\n                duration[key] = input;\n            } else {\n                duration.milliseconds = input;\n            }\n        } else if (!!(match = aspNetRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y  : 0,\n                d  : toInt(match[DATE])                         * sign,\n                h  : toInt(match[HOUR])                         * sign,\n                m  : toInt(match[MINUTE])                       * sign,\n                s  : toInt(match[SECOND])                       * sign,\n                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n            };\n        } else if (!!(match = isoRegex.exec(input))) {\n            sign = (match[1] === '-') ? -1 : 1;\n            duration = {\n                y : parseIso(match[2], sign),\n                M : parseIso(match[3], sign),\n                w : parseIso(match[4], sign),\n                d : parseIso(match[5], sign),\n                h : parseIso(match[6], sign),\n                m : parseIso(match[7], sign),\n                s : parseIso(match[8], sign)\n            };\n        } else if (duration == null) {// checks for null or undefined\n            duration = {};\n        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {\n            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));\n\n            duration = {};\n            duration.ms = diffRes.milliseconds;\n            duration.M = diffRes.months;\n        }\n\n        ret = new Duration(duration);\n\n        if (isDuration(input) && hasOwnProp(input, '_locale')) {\n            ret._locale = input._locale;\n        }\n\n        return ret;\n    }\n\n    createDuration.fn = Duration.prototype;\n    createDuration.invalid = createInvalid$1;\n\n    function parseIso (inp, sign) {\n        // We'd normally use ~~inp for this, but unfortunately it also\n        // converts floats to ints.\n        // inp may be undefined, so careful calling replace on it.\n        var res = inp && parseFloat(inp.replace(',', '.'));\n        // apply sign while we're at it\n        return (isNaN(res) ? 0 : res) * sign;\n    }\n\n    function positiveMomentsDifference(base, other) {\n        var res = {};\n\n        res.months = other.month() - base.month() +\n            (other.year() - base.year()) * 12;\n        if (base.clone().add(res.months, 'M').isAfter(other)) {\n            --res.months;\n        }\n\n        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));\n\n        return res;\n    }\n\n    function momentsDifference(base, other) {\n        var res;\n        if (!(base.isValid() && other.isValid())) {\n            return {milliseconds: 0, months: 0};\n        }\n\n        other = cloneWithOffset(other, base);\n        if (base.isBefore(other)) {\n            res = positiveMomentsDifference(base, other);\n        } else {\n            res = positiveMomentsDifference(other, base);\n            res.milliseconds = -res.milliseconds;\n            res.months = -res.months;\n        }\n\n        return res;\n    }\n\n    // TODO: remove 'name' arg after deprecation is removed\n    function createAdder(direction, name) {\n        return function (val, period) {\n            var dur, tmp;\n            //invert the arguments, but complain about it\n            if (period !== null && !isNaN(+period)) {\n                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');\n                tmp = val; val = period; period = tmp;\n            }\n\n            val = typeof val === 'string' ? +val : val;\n            dur = createDuration(val, period);\n            addSubtract(this, dur, direction);\n            return this;\n        };\n    }\n\n    function addSubtract (mom, duration, isAdding, updateOffset) {\n        var milliseconds = duration._milliseconds,\n            days = absRound(duration._days),\n            months = absRound(duration._months);\n\n        if (!mom.isValid()) {\n            // No op\n            return;\n        }\n\n        updateOffset = updateOffset == null ? true : updateOffset;\n\n        if (months) {\n            setMonth(mom, get(mom, 'Month') + months * isAdding);\n        }\n        if (days) {\n            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);\n        }\n        if (milliseconds) {\n            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);\n        }\n        if (updateOffset) {\n            hooks.updateOffset(mom, days || months);\n        }\n    }\n\n    var add      = createAdder(1, 'add');\n    var subtract = createAdder(-1, 'subtract');\n\n    function getCalendarFormat(myMoment, now) {\n        var diff = myMoment.diff(now, 'days', true);\n        return diff < -6 ? 'sameElse' :\n                diff < -1 ? 'lastWeek' :\n                diff < 0 ? 'lastDay' :\n                diff < 1 ? 'sameDay' :\n                diff < 2 ? 'nextDay' :\n                diff < 7 ? 'nextWeek' : 'sameElse';\n    }\n\n    function calendar$1 (time, formats) {\n        // We want to compare the start of today, vs this.\n        // Getting start-of-today depends on whether we're local/utc/offset or not.\n        var now = time || createLocal(),\n            sod = cloneWithOffset(now, this).startOf('day'),\n            format = hooks.calendarFormat(this, sod) || 'sameElse';\n\n        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);\n\n        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));\n    }\n\n    function clone () {\n        return new Moment(this);\n    }\n\n    function isAfter (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() > localInput.valueOf();\n        } else {\n            return localInput.valueOf() < this.clone().startOf(units).valueOf();\n        }\n    }\n\n    function isBefore (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input);\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() < localInput.valueOf();\n        } else {\n            return this.clone().endOf(units).valueOf() < localInput.valueOf();\n        }\n    }\n\n    function isBetween (from, to, units, inclusivity) {\n        var localFrom = isMoment(from) ? from : createLocal(from),\n            localTo = isMoment(to) ? to : createLocal(to);\n        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {\n            return false;\n        }\n        inclusivity = inclusivity || '()';\n        return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&\n            (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));\n    }\n\n    function isSame (input, units) {\n        var localInput = isMoment(input) ? input : createLocal(input),\n            inputMs;\n        if (!(this.isValid() && localInput.isValid())) {\n            return false;\n        }\n        units = normalizeUnits(units) || 'millisecond';\n        if (units === 'millisecond') {\n            return this.valueOf() === localInput.valueOf();\n        } else {\n            inputMs = localInput.valueOf();\n            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();\n        }\n    }\n\n    function isSameOrAfter (input, units) {\n        return this.isSame(input, units) || this.isAfter(input, units);\n    }\n\n    function isSameOrBefore (input, units) {\n        return this.isSame(input, units) || this.isBefore(input, units);\n    }\n\n    function diff (input, units, asFloat) {\n        var that,\n            zoneDelta,\n            output;\n\n        if (!this.isValid()) {\n            return NaN;\n        }\n\n        that = cloneWithOffset(input, this);\n\n        if (!that.isValid()) {\n            return NaN;\n        }\n\n        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;\n\n        units = normalizeUnits(units);\n\n        switch (units) {\n            case 'year': output = monthDiff(this, that) / 12; break;\n            case 'month': output = monthDiff(this, that); break;\n            case 'quarter': output = monthDiff(this, that) / 3; break;\n            case 'second': output = (this - that) / 1e3; break; // 1000\n            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60\n            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60\n            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst\n            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst\n            default: output = this - that;\n        }\n\n        return asFloat ? output : absFloor(output);\n    }\n\n    function monthDiff (a, b) {\n        // difference in months\n        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),\n            // b is in (anchor - 1 month, anchor + 1 month)\n            anchor = a.clone().add(wholeMonthDiff, 'months'),\n            anchor2, adjust;\n\n        if (b - anchor < 0) {\n            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor - anchor2);\n        } else {\n            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');\n            // linear across the month\n            adjust = (b - anchor) / (anchor2 - anchor);\n        }\n\n        //check for negative zero, return zero if negative zero\n        return -(wholeMonthDiff + adjust) || 0;\n    }\n\n    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';\n    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';\n\n    function toString () {\n        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');\n    }\n\n    function toISOString(keepOffset) {\n        if (!this.isValid()) {\n            return null;\n        }\n        var utc = keepOffset !== true;\n        var m = utc ? this.clone().utc() : this;\n        if (m.year() < 0 || m.year() > 9999) {\n            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');\n        }\n        if (isFunction(Date.prototype.toISOString)) {\n            // native implementation is ~50x faster, use it when we can\n            if (utc) {\n                return this.toDate().toISOString();\n            } else {\n                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));\n            }\n        }\n        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');\n    }\n\n    /**\n     * Return a human readable representation of a moment that can\n     * also be evaluated to get a new moment which is the same\n     *\n     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects\n     */\n    function inspect () {\n        if (!this.isValid()) {\n            return 'moment.invalid(/* ' + this._i + ' */)';\n        }\n        var func = 'moment';\n        var zone = '';\n        if (!this.isLocal()) {\n            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';\n            zone = 'Z';\n        }\n        var prefix = '[' + func + '(\"]';\n        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';\n        var datetime = '-MM-DD[T]HH:mm:ss.SSS';\n        var suffix = zone + '[\")]';\n\n        return this.format(prefix + year + datetime + suffix);\n    }\n\n    function format (inputString) {\n        if (!inputString) {\n            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;\n        }\n        var output = formatMoment(this, inputString);\n        return this.localeData().postformat(output);\n    }\n\n    function from (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function fromNow (withoutSuffix) {\n        return this.from(createLocal(), withoutSuffix);\n    }\n\n    function to (time, withoutSuffix) {\n        if (this.isValid() &&\n                ((isMoment(time) && time.isValid()) ||\n                 createLocal(time).isValid())) {\n            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);\n        } else {\n            return this.localeData().invalidDate();\n        }\n    }\n\n    function toNow (withoutSuffix) {\n        return this.to(createLocal(), withoutSuffix);\n    }\n\n    // If passed a locale key, it will set the locale for this\n    // instance.  Otherwise, it will return the locale configuration\n    // variables for this instance.\n    function locale (key) {\n        var newLocaleData;\n\n        if (key === undefined) {\n            return this._locale._abbr;\n        } else {\n            newLocaleData = getLocale(key);\n            if (newLocaleData != null) {\n                this._locale = newLocaleData;\n            }\n            return this;\n        }\n    }\n\n    var lang = deprecate(\n        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n        function (key) {\n            if (key === undefined) {\n                return this.localeData();\n            } else {\n                return this.locale(key);\n            }\n        }\n    );\n\n    function localeData () {\n        return this._locale;\n    }\n\n    var MS_PER_SECOND = 1000;\n    var MS_PER_MINUTE = 60 * MS_PER_SECOND;\n    var MS_PER_HOUR = 60 * MS_PER_MINUTE;\n    var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;\n\n    // actual modulo - handles negative numbers (for dates before 1970):\n    function mod$1(dividend, divisor) {\n        return (dividend % divisor + divisor) % divisor;\n    }\n\n    function localStartOfDate(y, m, d) {\n        // the date constructor remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return new Date(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return new Date(y, m, d).valueOf();\n        }\n    }\n\n    function utcStartOfDate(y, m, d) {\n        // Date.UTC remaps years 0-99 to 1900-1999\n        if (y < 100 && y >= 0) {\n            // preserve leap years using a full 400 year cycle, then reset\n            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;\n        } else {\n            return Date.UTC(y, m, d);\n        }\n    }\n\n    function startOf (units) {\n        var time;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year(), 0, 1);\n                break;\n            case 'quarter':\n                time = startOfDate(this.year(), this.month() - this.month() % 3, 1);\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month(), 1);\n                break;\n            case 'week':\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday());\n                break;\n            case 'isoWeek':\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date());\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_MINUTE);\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time -= mod$1(time, MS_PER_SECOND);\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function endOf (units) {\n        var time;\n        units = normalizeUnits(units);\n        if (units === undefined || units === 'millisecond' || !this.isValid()) {\n            return this;\n        }\n\n        var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;\n\n        switch (units) {\n            case 'year':\n                time = startOfDate(this.year() + 1, 0, 1) - 1;\n                break;\n            case 'quarter':\n                time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;\n                break;\n            case 'month':\n                time = startOfDate(this.year(), this.month() + 1, 1) - 1;\n                break;\n            case 'week':\n                time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;\n                break;\n            case 'isoWeek':\n                time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;\n                break;\n            case 'day':\n            case 'date':\n                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;\n                break;\n            case 'hour':\n                time = this._d.valueOf();\n                time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;\n                break;\n            case 'minute':\n                time = this._d.valueOf();\n                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;\n                break;\n            case 'second':\n                time = this._d.valueOf();\n                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;\n                break;\n        }\n\n        this._d.setTime(time);\n        hooks.updateOffset(this, true);\n        return this;\n    }\n\n    function valueOf () {\n        return this._d.valueOf() - ((this._offset || 0) * 60000);\n    }\n\n    function unix () {\n        return Math.floor(this.valueOf() / 1000);\n    }\n\n    function toDate () {\n        return new Date(this.valueOf());\n    }\n\n    function toArray () {\n        var m = this;\n        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];\n    }\n\n    function toObject () {\n        var m = this;\n        return {\n            years: m.year(),\n            months: m.month(),\n            date: m.date(),\n            hours: m.hours(),\n            minutes: m.minutes(),\n            seconds: m.seconds(),\n            milliseconds: m.milliseconds()\n        };\n    }\n\n    function toJSON () {\n        // new Date(NaN).toJSON() === null\n        return this.isValid() ? this.toISOString() : null;\n    }\n\n    function isValid$2 () {\n        return isValid(this);\n    }\n\n    function parsingFlags () {\n        return extend({}, getParsingFlags(this));\n    }\n\n    function invalidAt () {\n        return getParsingFlags(this).overflow;\n    }\n\n    function creationData() {\n        return {\n            input: this._i,\n            format: this._f,\n            locale: this._locale,\n            isUTC: this._isUTC,\n            strict: this._strict\n        };\n    }\n\n    // FORMATTING\n\n    addFormatToken(0, ['gg', 2], 0, function () {\n        return this.weekYear() % 100;\n    });\n\n    addFormatToken(0, ['GG', 2], 0, function () {\n        return this.isoWeekYear() % 100;\n    });\n\n    function addWeekYearFormatToken (token, getter) {\n        addFormatToken(0, [token, token.length], 0, getter);\n    }\n\n    addWeekYearFormatToken('gggg',     'weekYear');\n    addWeekYearFormatToken('ggggg',    'weekYear');\n    addWeekYearFormatToken('GGGG',  'isoWeekYear');\n    addWeekYearFormatToken('GGGGG', 'isoWeekYear');\n\n    // ALIASES\n\n    addUnitAlias('weekYear', 'gg');\n    addUnitAlias('isoWeekYear', 'GG');\n\n    // PRIORITY\n\n    addUnitPriority('weekYear', 1);\n    addUnitPriority('isoWeekYear', 1);\n\n\n    // PARSING\n\n    addRegexToken('G',      matchSigned);\n    addRegexToken('g',      matchSigned);\n    addRegexToken('GG',     match1to2, match2);\n    addRegexToken('gg',     match1to2, match2);\n    addRegexToken('GGGG',   match1to4, match4);\n    addRegexToken('gggg',   match1to4, match4);\n    addRegexToken('GGGGG',  match1to6, match6);\n    addRegexToken('ggggg',  match1to6, match6);\n\n    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {\n        week[token.substr(0, 2)] = toInt(input);\n    });\n\n    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {\n        week[token] = hooks.parseTwoDigitYear(input);\n    });\n\n    // MOMENTS\n\n    function getSetWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input,\n                this.week(),\n                this.weekday(),\n                this.localeData()._week.dow,\n                this.localeData()._week.doy);\n    }\n\n    function getSetISOWeekYear (input) {\n        return getSetWeekYearHelper.call(this,\n                input, this.isoWeek(), this.isoWeekday(), 1, 4);\n    }\n\n    function getISOWeeksInYear () {\n        return weeksInYear(this.year(), 1, 4);\n    }\n\n    function getWeeksInYear () {\n        var weekInfo = this.localeData()._week;\n        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);\n    }\n\n    function getSetWeekYearHelper(input, week, weekday, dow, doy) {\n        var weeksTarget;\n        if (input == null) {\n            return weekOfYear(this, dow, doy).year;\n        } else {\n            weeksTarget = weeksInYear(input, dow, doy);\n            if (week > weeksTarget) {\n                week = weeksTarget;\n            }\n            return setWeekAll.call(this, input, week, weekday, dow, doy);\n        }\n    }\n\n    function setWeekAll(weekYear, week, weekday, dow, doy) {\n        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),\n            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);\n\n        this.year(date.getUTCFullYear());\n        this.month(date.getUTCMonth());\n        this.date(date.getUTCDate());\n        return this;\n    }\n\n    // FORMATTING\n\n    addFormatToken('Q', 0, 'Qo', 'quarter');\n\n    // ALIASES\n\n    addUnitAlias('quarter', 'Q');\n\n    // PRIORITY\n\n    addUnitPriority('quarter', 7);\n\n    // PARSING\n\n    addRegexToken('Q', match1);\n    addParseToken('Q', function (input, array) {\n        array[MONTH] = (toInt(input) - 1) * 3;\n    });\n\n    // MOMENTS\n\n    function getSetQuarter (input) {\n        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);\n    }\n\n    // FORMATTING\n\n    addFormatToken('D', ['DD', 2], 'Do', 'date');\n\n    // ALIASES\n\n    addUnitAlias('date', 'D');\n\n    // PRIORITY\n    addUnitPriority('date', 9);\n\n    // PARSING\n\n    addRegexToken('D',  match1to2);\n    addRegexToken('DD', match1to2, match2);\n    addRegexToken('Do', function (isStrict, locale) {\n        // TODO: Remove \"ordinalParse\" fallback in next major release.\n        return isStrict ?\n          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :\n          locale._dayOfMonthOrdinalParseLenient;\n    });\n\n    addParseToken(['D', 'DD'], DATE);\n    addParseToken('Do', function (input, array) {\n        array[DATE] = toInt(input.match(match1to2)[0]);\n    });\n\n    // MOMENTS\n\n    var getSetDayOfMonth = makeGetSet('Date', true);\n\n    // FORMATTING\n\n    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');\n\n    // ALIASES\n\n    addUnitAlias('dayOfYear', 'DDD');\n\n    // PRIORITY\n    addUnitPriority('dayOfYear', 4);\n\n    // PARSING\n\n    addRegexToken('DDD',  match1to3);\n    addRegexToken('DDDD', match3);\n    addParseToken(['DDD', 'DDDD'], function (input, array, config) {\n        config._dayOfYear = toInt(input);\n    });\n\n    // HELPERS\n\n    // MOMENTS\n\n    function getSetDayOfYear (input) {\n        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;\n        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');\n    }\n\n    // FORMATTING\n\n    addFormatToken('m', ['mm', 2], 0, 'minute');\n\n    // ALIASES\n\n    addUnitAlias('minute', 'm');\n\n    // PRIORITY\n\n    addUnitPriority('minute', 14);\n\n    // PARSING\n\n    addRegexToken('m',  match1to2);\n    addRegexToken('mm', match1to2, match2);\n    addParseToken(['m', 'mm'], MINUTE);\n\n    // MOMENTS\n\n    var getSetMinute = makeGetSet('Minutes', false);\n\n    // FORMATTING\n\n    addFormatToken('s', ['ss', 2], 0, 'second');\n\n    // ALIASES\n\n    addUnitAlias('second', 's');\n\n    // PRIORITY\n\n    addUnitPriority('second', 15);\n\n    // PARSING\n\n    addRegexToken('s',  match1to2);\n    addRegexToken('ss', match1to2, match2);\n    addParseToken(['s', 'ss'], SECOND);\n\n    // MOMENTS\n\n    var getSetSecond = makeGetSet('Seconds', false);\n\n    // FORMATTING\n\n    addFormatToken('S', 0, 0, function () {\n        return ~~(this.millisecond() / 100);\n    });\n\n    addFormatToken(0, ['SS', 2], 0, function () {\n        return ~~(this.millisecond() / 10);\n    });\n\n    addFormatToken(0, ['SSS', 3], 0, 'millisecond');\n    addFormatToken(0, ['SSSS', 4], 0, function () {\n        return this.millisecond() * 10;\n    });\n    addFormatToken(0, ['SSSSS', 5], 0, function () {\n        return this.millisecond() * 100;\n    });\n    addFormatToken(0, ['SSSSSS', 6], 0, function () {\n        return this.millisecond() * 1000;\n    });\n    addFormatToken(0, ['SSSSSSS', 7], 0, function () {\n        return this.millisecond() * 10000;\n    });\n    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {\n        return this.millisecond() * 100000;\n    });\n    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {\n        return this.millisecond() * 1000000;\n    });\n\n\n    // ALIASES\n\n    addUnitAlias('millisecond', 'ms');\n\n    // PRIORITY\n\n    addUnitPriority('millisecond', 16);\n\n    // PARSING\n\n    addRegexToken('S',    match1to3, match1);\n    addRegexToken('SS',   match1to3, match2);\n    addRegexToken('SSS',  match1to3, match3);\n\n    var token;\n    for (token = 'SSSS'; token.length <= 9; token += 'S') {\n        addRegexToken(token, matchUnsigned);\n    }\n\n    function parseMs(input, array) {\n        array[MILLISECOND] = toInt(('0.' + input) * 1000);\n    }\n\n    for (token = 'S'; token.length <= 9; token += 'S') {\n        addParseToken(token, parseMs);\n    }\n    // MOMENTS\n\n    var getSetMillisecond = makeGetSet('Milliseconds', false);\n\n    // FORMATTING\n\n    addFormatToken('z',  0, 0, 'zoneAbbr');\n    addFormatToken('zz', 0, 0, 'zoneName');\n\n    // MOMENTS\n\n    function getZoneAbbr () {\n        return this._isUTC ? 'UTC' : '';\n    }\n\n    function getZoneName () {\n        return this._isUTC ? 'Coordinated Universal Time' : '';\n    }\n\n    var proto = Moment.prototype;\n\n    proto.add               = add;\n    proto.calendar          = calendar$1;\n    proto.clone             = clone;\n    proto.diff              = diff;\n    proto.endOf             = endOf;\n    proto.format            = format;\n    proto.from              = from;\n    proto.fromNow           = fromNow;\n    proto.to                = to;\n    proto.toNow             = toNow;\n    proto.get               = stringGet;\n    proto.invalidAt         = invalidAt;\n    proto.isAfter           = isAfter;\n    proto.isBefore          = isBefore;\n    proto.isBetween         = isBetween;\n    proto.isSame            = isSame;\n    proto.isSameOrAfter     = isSameOrAfter;\n    proto.isSameOrBefore    = isSameOrBefore;\n    proto.isValid           = isValid$2;\n    proto.lang              = lang;\n    proto.locale            = locale;\n    proto.localeData        = localeData;\n    proto.max               = prototypeMax;\n    proto.min               = prototypeMin;\n    proto.parsingFlags      = parsingFlags;\n    proto.set               = stringSet;\n    proto.startOf           = startOf;\n    proto.subtract          = subtract;\n    proto.toArray           = toArray;\n    proto.toObject          = toObject;\n    proto.toDate            = toDate;\n    proto.toISOString       = toISOString;\n    proto.inspect           = inspect;\n    proto.toJSON            = toJSON;\n    proto.toString          = toString;\n    proto.unix              = unix;\n    proto.valueOf           = valueOf;\n    proto.creationData      = creationData;\n    proto.year       = getSetYear;\n    proto.isLeapYear = getIsLeapYear;\n    proto.weekYear    = getSetWeekYear;\n    proto.isoWeekYear = getSetISOWeekYear;\n    proto.quarter = proto.quarters = getSetQuarter;\n    proto.month       = getSetMonth;\n    proto.daysInMonth = getDaysInMonth;\n    proto.week           = proto.weeks        = getSetWeek;\n    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;\n    proto.weeksInYear    = getWeeksInYear;\n    proto.isoWeeksInYear = getISOWeeksInYear;\n    proto.date       = getSetDayOfMonth;\n    proto.day        = proto.days             = getSetDayOfWeek;\n    proto.weekday    = getSetLocaleDayOfWeek;\n    proto.isoWeekday = getSetISODayOfWeek;\n    proto.dayOfYear  = getSetDayOfYear;\n    proto.hour = proto.hours = getSetHour;\n    proto.minute = proto.minutes = getSetMinute;\n    proto.second = proto.seconds = getSetSecond;\n    proto.millisecond = proto.milliseconds = getSetMillisecond;\n    proto.utcOffset            = getSetOffset;\n    proto.utc                  = setOffsetToUTC;\n    proto.local                = setOffsetToLocal;\n    proto.parseZone            = setOffsetToParsedOffset;\n    proto.hasAlignedHourOffset = hasAlignedHourOffset;\n    proto.isDST                = isDaylightSavingTime;\n    proto.isLocal              = isLocal;\n    proto.isUtcOffset          = isUtcOffset;\n    proto.isUtc                = isUtc;\n    proto.isUTC                = isUtc;\n    proto.zoneAbbr = getZoneAbbr;\n    proto.zoneName = getZoneName;\n    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);\n    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);\n    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);\n    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\n    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n\n    function createUnix (input) {\n        return createLocal(input * 1000);\n    }\n\n    function createInZone () {\n        return createLocal.apply(null, arguments).parseZone();\n    }\n\n    function preParsePostFormat (string) {\n        return string;\n    }\n\n    var proto$1 = Locale.prototype;\n\n    proto$1.calendar        = calendar;\n    proto$1.longDateFormat  = longDateFormat;\n    proto$1.invalidDate     = invalidDate;\n    proto$1.ordinal         = ordinal;\n    proto$1.preparse        = preParsePostFormat;\n    proto$1.postformat      = preParsePostFormat;\n    proto$1.relativeTime    = relativeTime;\n    proto$1.pastFuture      = pastFuture;\n    proto$1.set             = set;\n\n    proto$1.months            =        localeMonths;\n    proto$1.monthsShort       =        localeMonthsShort;\n    proto$1.monthsParse       =        localeMonthsParse;\n    proto$1.monthsRegex       = monthsRegex;\n    proto$1.monthsShortRegex  = monthsShortRegex;\n    proto$1.week = localeWeek;\n    proto$1.firstDayOfYear = localeFirstDayOfYear;\n    proto$1.firstDayOfWeek = localeFirstDayOfWeek;\n\n    proto$1.weekdays       =        localeWeekdays;\n    proto$1.weekdaysMin    =        localeWeekdaysMin;\n    proto$1.weekdaysShort  =        localeWeekdaysShort;\n    proto$1.weekdaysParse  =        localeWeekdaysParse;\n\n    proto$1.weekdaysRegex       =        weekdaysRegex;\n    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;\n    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;\n\n    proto$1.isPM = localeIsPM;\n    proto$1.meridiem = localeMeridiem;\n\n    function get$1 (format, index, field, setter) {\n        var locale = getLocale();\n        var utc = createUTC().set(setter, index);\n        return locale[field](utc, format);\n    }\n\n    function listMonthsImpl (format, index, field) {\n        if (isNumber(format)) {\n            index = format;\n            format = undefined;\n        }\n\n        format = format || '';\n\n        if (index != null) {\n            return get$1(format, index, field, 'month');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 12; i++) {\n            out[i] = get$1(format, i, field, 'month');\n        }\n        return out;\n    }\n\n    // ()\n    // (5)\n    // (fmt, 5)\n    // (fmt)\n    // (true)\n    // (true, 5)\n    // (true, fmt, 5)\n    // (true, fmt)\n    function listWeekdaysImpl (localeSorted, format, index, field) {\n        if (typeof localeSorted === 'boolean') {\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        } else {\n            format = localeSorted;\n            index = format;\n            localeSorted = false;\n\n            if (isNumber(format)) {\n                index = format;\n                format = undefined;\n            }\n\n            format = format || '';\n        }\n\n        var locale = getLocale(),\n            shift = localeSorted ? locale._week.dow : 0;\n\n        if (index != null) {\n            return get$1(format, (index + shift) % 7, field, 'day');\n        }\n\n        var i;\n        var out = [];\n        for (i = 0; i < 7; i++) {\n            out[i] = get$1(format, (i + shift) % 7, field, 'day');\n        }\n        return out;\n    }\n\n    function listMonths (format, index) {\n        return listMonthsImpl(format, index, 'months');\n    }\n\n    function listMonthsShort (format, index) {\n        return listMonthsImpl(format, index, 'monthsShort');\n    }\n\n    function listWeekdays (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');\n    }\n\n    function listWeekdaysShort (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');\n    }\n\n    function listWeekdaysMin (localeSorted, format, index) {\n        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');\n    }\n\n    getSetGlobalLocale('en', {\n        dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,\n        ordinal : function (number) {\n            var b = number % 10,\n                output = (toInt(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n            return number + output;\n        }\n    });\n\n    // Side effect imports\n\n    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);\n    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);\n\n    var mathAbs = Math.abs;\n\n    function abs () {\n        var data           = this._data;\n\n        this._milliseconds = mathAbs(this._milliseconds);\n        this._days         = mathAbs(this._days);\n        this._months       = mathAbs(this._months);\n\n        data.milliseconds  = mathAbs(data.milliseconds);\n        data.seconds       = mathAbs(data.seconds);\n        data.minutes       = mathAbs(data.minutes);\n        data.hours         = mathAbs(data.hours);\n        data.months        = mathAbs(data.months);\n        data.years         = mathAbs(data.years);\n\n        return this;\n    }\n\n    function addSubtract$1 (duration, input, value, direction) {\n        var other = createDuration(input, value);\n\n        duration._milliseconds += direction * other._milliseconds;\n        duration._days         += direction * other._days;\n        duration._months       += direction * other._months;\n\n        return duration._bubble();\n    }\n\n    // supports only 2.0-style add(1, 's') or add(duration)\n    function add$1 (input, value) {\n        return addSubtract$1(this, input, value, 1);\n    }\n\n    // supports only 2.0-style subtract(1, 's') or subtract(duration)\n    function subtract$1 (input, value) {\n        return addSubtract$1(this, input, value, -1);\n    }\n\n    function absCeil (number) {\n        if (number < 0) {\n            return Math.floor(number);\n        } else {\n            return Math.ceil(number);\n        }\n    }\n\n    function bubble () {\n        var milliseconds = this._milliseconds;\n        var days         = this._days;\n        var months       = this._months;\n        var data         = this._data;\n        var seconds, minutes, hours, years, monthsFromDays;\n\n        // if we have a mix of positive and negative values, bubble down first\n        // check: https://github.com/moment/moment/issues/2166\n        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||\n                (milliseconds <= 0 && days <= 0 && months <= 0))) {\n            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;\n            days = 0;\n            months = 0;\n        }\n\n        // The following code bubbles up values, see the tests for\n        // examples of what that means.\n        data.milliseconds = milliseconds % 1000;\n\n        seconds           = absFloor(milliseconds / 1000);\n        data.seconds      = seconds % 60;\n\n        minutes           = absFloor(seconds / 60);\n        data.minutes      = minutes % 60;\n\n        hours             = absFloor(minutes / 60);\n        data.hours        = hours % 24;\n\n        days += absFloor(hours / 24);\n\n        // convert days to months\n        monthsFromDays = absFloor(daysToMonths(days));\n        months += monthsFromDays;\n        days -= absCeil(monthsToDays(monthsFromDays));\n\n        // 12 months -> 1 year\n        years = absFloor(months / 12);\n        months %= 12;\n\n        data.days   = days;\n        data.months = months;\n        data.years  = years;\n\n        return this;\n    }\n\n    function daysToMonths (days) {\n        // 400 years have 146097 days (taking into account leap year rules)\n        // 400 years have 12 months === 4800\n        return days * 4800 / 146097;\n    }\n\n    function monthsToDays (months) {\n        // the reverse of daysToMonths\n        return months * 146097 / 4800;\n    }\n\n    function as (units) {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        var days;\n        var months;\n        var milliseconds = this._milliseconds;\n\n        units = normalizeUnits(units);\n\n        if (units === 'month' || units === 'quarter' || units === 'year') {\n            days = this._days + milliseconds / 864e5;\n            months = this._months + daysToMonths(days);\n            switch (units) {\n                case 'month':   return months;\n                case 'quarter': return months / 3;\n                case 'year':    return months / 12;\n            }\n        } else {\n            // handle milliseconds separately because of floating point math errors (issue #1867)\n            days = this._days + Math.round(monthsToDays(this._months));\n            switch (units) {\n                case 'week'   : return days / 7     + milliseconds / 6048e5;\n                case 'day'    : return days         + milliseconds / 864e5;\n                case 'hour'   : return days * 24    + milliseconds / 36e5;\n                case 'minute' : return days * 1440  + milliseconds / 6e4;\n                case 'second' : return days * 86400 + milliseconds / 1000;\n                // Math.floor prevents floating point math errors here\n                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;\n                default: throw new Error('Unknown unit ' + units);\n            }\n        }\n    }\n\n    // TODO: Use this.as('ms')?\n    function valueOf$1 () {\n        if (!this.isValid()) {\n            return NaN;\n        }\n        return (\n            this._milliseconds +\n            this._days * 864e5 +\n            (this._months % 12) * 2592e6 +\n            toInt(this._months / 12) * 31536e6\n        );\n    }\n\n    function makeAs (alias) {\n        return function () {\n            return this.as(alias);\n        };\n    }\n\n    var asMilliseconds = makeAs('ms');\n    var asSeconds      = makeAs('s');\n    var asMinutes      = makeAs('m');\n    var asHours        = makeAs('h');\n    var asDays         = makeAs('d');\n    var asWeeks        = makeAs('w');\n    var asMonths       = makeAs('M');\n    var asQuarters     = makeAs('Q');\n    var asYears        = makeAs('y');\n\n    function clone$1 () {\n        return createDuration(this);\n    }\n\n    function get$2 (units) {\n        units = normalizeUnits(units);\n        return this.isValid() ? this[units + 's']() : NaN;\n    }\n\n    function makeGetter(name) {\n        return function () {\n            return this.isValid() ? this._data[name] : NaN;\n        };\n    }\n\n    var milliseconds = makeGetter('milliseconds');\n    var seconds      = makeGetter('seconds');\n    var minutes      = makeGetter('minutes');\n    var hours        = makeGetter('hours');\n    var days         = makeGetter('days');\n    var months       = makeGetter('months');\n    var years        = makeGetter('years');\n\n    function weeks () {\n        return absFloor(this.days() / 7);\n    }\n\n    var round = Math.round;\n    var thresholds = {\n        ss: 44,         // a few seconds to seconds\n        s : 45,         // seconds to minute\n        m : 45,         // minutes to hour\n        h : 22,         // hours to day\n        d : 26,         // days to month\n        M : 11          // months to year\n    };\n\n    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize\n    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {\n        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);\n    }\n\n    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {\n        var duration = createDuration(posNegDuration).abs();\n        var seconds  = round(duration.as('s'));\n        var minutes  = round(duration.as('m'));\n        var hours    = round(duration.as('h'));\n        var days     = round(duration.as('d'));\n        var months   = round(duration.as('M'));\n        var years    = round(duration.as('y'));\n\n        var a = seconds <= thresholds.ss && ['s', seconds]  ||\n                seconds < thresholds.s   && ['ss', seconds] ||\n                minutes <= 1             && ['m']           ||\n                minutes < thresholds.m   && ['mm', minutes] ||\n                hours   <= 1             && ['h']           ||\n                hours   < thresholds.h   && ['hh', hours]   ||\n                days    <= 1             && ['d']           ||\n                days    < thresholds.d   && ['dd', days]    ||\n                months  <= 1             && ['M']           ||\n                months  < thresholds.M   && ['MM', months]  ||\n                years   <= 1             && ['y']           || ['yy', years];\n\n        a[2] = withoutSuffix;\n        a[3] = +posNegDuration > 0;\n        a[4] = locale;\n        return substituteTimeAgo.apply(null, a);\n    }\n\n    // This function allows you to set the rounding function for relative time strings\n    function getSetRelativeTimeRounding (roundingFunction) {\n        if (roundingFunction === undefined) {\n            return round;\n        }\n        if (typeof(roundingFunction) === 'function') {\n            round = roundingFunction;\n            return true;\n        }\n        return false;\n    }\n\n    // This function allows you to set a threshold for relative time strings\n    function getSetRelativeTimeThreshold (threshold, limit) {\n        if (thresholds[threshold] === undefined) {\n            return false;\n        }\n        if (limit === undefined) {\n            return thresholds[threshold];\n        }\n        thresholds[threshold] = limit;\n        if (threshold === 's') {\n            thresholds.ss = limit - 1;\n        }\n        return true;\n    }\n\n    function humanize (withSuffix) {\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var locale = this.localeData();\n        var output = relativeTime$1(this, !withSuffix, locale);\n\n        if (withSuffix) {\n            output = locale.pastFuture(+this, output);\n        }\n\n        return locale.postformat(output);\n    }\n\n    var abs$1 = Math.abs;\n\n    function sign(x) {\n        return ((x > 0) - (x < 0)) || +x;\n    }\n\n    function toISOString$1() {\n        // for ISO strings we do not use the normal bubbling rules:\n        //  * milliseconds bubble up until they become hours\n        //  * days do not bubble at all\n        //  * months bubble up until they become years\n        // This is because there is no context-free conversion between hours and days\n        // (think of clock changes)\n        // and also not between days and months (28-31 days per month)\n        if (!this.isValid()) {\n            return this.localeData().invalidDate();\n        }\n\n        var seconds = abs$1(this._milliseconds) / 1000;\n        var days         = abs$1(this._days);\n        var months       = abs$1(this._months);\n        var minutes, hours, years;\n\n        // 3600 seconds -> 60 minutes -> 1 hour\n        minutes           = absFloor(seconds / 60);\n        hours             = absFloor(minutes / 60);\n        seconds %= 60;\n        minutes %= 60;\n\n        // 12 months -> 1 year\n        years  = absFloor(months / 12);\n        months %= 12;\n\n\n        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js\n        var Y = years;\n        var M = months;\n        var D = days;\n        var h = hours;\n        var m = minutes;\n        var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';\n        var total = this.asSeconds();\n\n        if (!total) {\n            // this is the same as C#'s (Noda) and python (isodate)...\n            // but not other JS (goog.date)\n            return 'P0D';\n        }\n\n        var totalSign = total < 0 ? '-' : '';\n        var ymSign = sign(this._months) !== sign(total) ? '-' : '';\n        var daysSign = sign(this._days) !== sign(total) ? '-' : '';\n        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';\n\n        return totalSign + 'P' +\n            (Y ? ymSign + Y + 'Y' : '') +\n            (M ? ymSign + M + 'M' : '') +\n            (D ? daysSign + D + 'D' : '') +\n            ((h || m || s) ? 'T' : '') +\n            (h ? hmsSign + h + 'H' : '') +\n            (m ? hmsSign + m + 'M' : '') +\n            (s ? hmsSign + s + 'S' : '');\n    }\n\n    var proto$2 = Duration.prototype;\n\n    proto$2.isValid        = isValid$1;\n    proto$2.abs            = abs;\n    proto$2.add            = add$1;\n    proto$2.subtract       = subtract$1;\n    proto$2.as             = as;\n    proto$2.asMilliseconds = asMilliseconds;\n    proto$2.asSeconds      = asSeconds;\n    proto$2.asMinutes      = asMinutes;\n    proto$2.asHours        = asHours;\n    proto$2.asDays         = asDays;\n    proto$2.asWeeks        = asWeeks;\n    proto$2.asMonths       = asMonths;\n    proto$2.asQuarters     = asQuarters;\n    proto$2.asYears        = asYears;\n    proto$2.valueOf        = valueOf$1;\n    proto$2._bubble        = bubble;\n    proto$2.clone          = clone$1;\n    proto$2.get            = get$2;\n    proto$2.milliseconds   = milliseconds;\n    proto$2.seconds        = seconds;\n    proto$2.minutes        = minutes;\n    proto$2.hours          = hours;\n    proto$2.days           = days;\n    proto$2.weeks          = weeks;\n    proto$2.months         = months;\n    proto$2.years          = years;\n    proto$2.humanize       = humanize;\n    proto$2.toISOString    = toISOString$1;\n    proto$2.toString       = toISOString$1;\n    proto$2.toJSON         = toISOString$1;\n    proto$2.locale         = locale;\n    proto$2.localeData     = localeData;\n\n    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\n    proto$2.lang = lang;\n\n    // Side effect imports\n\n    // FORMATTING\n\n    addFormatToken('X', 0, 0, 'unix');\n    addFormatToken('x', 0, 0, 'valueOf');\n\n    // PARSING\n\n    addRegexToken('x', matchSigned);\n    addRegexToken('X', matchTimestamp);\n    addParseToken('X', function (input, array, config) {\n        config._d = new Date(parseFloat(input, 10) * 1000);\n    });\n    addParseToken('x', function (input, array, config) {\n        config._d = new Date(toInt(input));\n    });\n\n    // Side effect imports\n\n\n    hooks.version = '2.24.0';\n\n    setHookCallback(createLocal);\n\n    hooks.fn                    = proto;\n    hooks.min                   = min;\n    hooks.max                   = max;\n    hooks.now                   = now;\n    hooks.utc                   = createUTC;\n    hooks.unix                  = createUnix;\n    hooks.months                = listMonths;\n    hooks.isDate                = isDate;\n    hooks.locale                = getSetGlobalLocale;\n    hooks.invalid               = createInvalid;\n    hooks.duration              = createDuration;\n    hooks.isMoment              = isMoment;\n    hooks.weekdays              = listWeekdays;\n    hooks.parseZone             = createInZone;\n    hooks.localeData            = getLocale;\n    hooks.isDuration            = isDuration;\n    hooks.monthsShort           = listMonthsShort;\n    hooks.weekdaysMin           = listWeekdaysMin;\n    hooks.defineLocale          = defineLocale;\n    hooks.updateLocale          = updateLocale;\n    hooks.locales               = listLocales;\n    hooks.weekdaysShort         = listWeekdaysShort;\n    hooks.normalizeUnits        = normalizeUnits;\n    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;\n    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;\n    hooks.calendarFormat        = getCalendarFormat;\n    hooks.prototype             = proto;\n\n    // currently HTML5 input type only supports 24-hour formats\n    hooks.HTML5_FMT = {\n        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type=\"datetime-local\" />\n        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type=\"datetime-local\" step=\"1\" />\n        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type=\"datetime-local\" step=\"0.001\" />\n        DATE: 'YYYY-MM-DD',                             // <input type=\"date\" />\n        TIME: 'HH:mm',                                  // <input type=\"time\" />\n        TIME_SECONDS: 'HH:mm:ss',                       // <input type=\"time\" step=\"1\" />\n        TIME_MS: 'HH:mm:ss.SSS',                        // <input type=\"time\" step=\"0.001\" />\n        WEEK: 'GGGG-[W]WW',                             // <input type=\"week\" />\n        MONTH: 'YYYY-MM'                                // <input type=\"month\" />\n    };\n\n    return hooks;\n\n})));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)(module)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar contactSummary = __webpack_require__(2);\nvar contactSummaryEmitter = __webpack_require__(5);\n\nmodule.exports = contactSummaryEmitter(contactSummary, contact, reports);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nconst moment = __webpack_require__(0);\nconst extras = __webpack_require__(4);\nconst { today, MAX_DAYS_IN_PREGNANCY, isHighRiskPregnancy, getNewestReport, getSubsequentPregnancyFollowUps,\n  getSubsequentDeliveries, isAlive, isReadyForNewPregnancy, isReadyForDelivery, isActivePregnancy, countANCFacilityVisits,\n  getAllRiskFactors, getLatestDangerSignsForPregnancy, getNextANCVisitDate,\n  getMostRecentLMPDateForPregnancy, getMostRecentEDDForPregnancy, getDeliveryDate, getFormArraySubmittedInWindow,\n  getRecentANCVisitWithEvent, getAllRiskFactorExtra, getField } = extras;\n\n//contact, reports, lineage are globally available for contact-summary\nconst thisContact = contact;\nconst thisLineage = lineage;\nconst allReports = reports;\nconst context = {\n  alive: isAlive(thisContact),\n  muted: false,\n  show_pregnancy_form: isReadyForNewPregnancy(thisContact, allReports),\n  show_delivery_form: isReadyForDelivery(thisContact, allReports),\n};\n\nconst fields = [\n  { appliesToType: 'person', label: 'patient_id', value: thisContact.patient_id, width: 4 },\n  { appliesToType: 'person', label: 'contact.age', value: thisContact.date_of_birth, width: 4, filter: 'age' },\n  { appliesToType: 'person', label: 'contact.sex', value: 'contact.sex.' + thisContact.sex, translate: true, width: 4 },\n  { appliesToType: 'person', label: 'person.field.phone', value: thisContact.phone, width: 4 },\n  { appliesToType: 'person', label: 'person.field.alternate_phone', value: thisContact.phone_alternate, width: 4 },\n  { appliesToType: 'person', label: 'External ID', value: thisContact.external_id, width: 4 },\n  { appliesToType: 'person', label: 'contact.parent', value: thisLineage, filter: 'lineage' },\n  { appliesToType: '!person', label: 'contact', value: thisContact.contact && thisContact.contact.name, width: 4 },\n  { appliesToType: '!person', label: 'contact.phone', value: thisContact.contact && thisContact.contact.phone, width: 4 },\n  { appliesToType: '!person', label: 'External ID', value: thisContact.external_id, width: 4 },\n  { appliesToType: '!person', appliesIf: function () { return thisContact.parent && thisLineage[0]; }, label: 'contact.parent', value: thisLineage, filter: 'lineage' },\n  { appliesToType: 'person', label: 'contact.notes', value: thisContact.notes, width: 12 },\n  { appliesToType: '!person', label: 'contact.notes', value: thisContact.notes, width: 12 }\n];\n\nif (thisContact.short_name) {\n  fields.unshift({ appliesToType: 'person', label: 'contact.short_name', value: thisContact.short_name, width: 4 });\n}\n\nconst cards = [\n  {\n    label: 'contact.profile.pregnancy.active',\n    appliesToType: 'report',\n    appliesIf: function (report) { return isActivePregnancy(thisContact, allReports, report); },\n    fields: function (report) {\n      const fields = [];\n      const riskFactors = getAllRiskFactors(allReports, report);\n      const riskFactorsCustom = getAllRiskFactorExtra(allReports, report);\n      //if (riskFactorCustom) { riskFactors.push(riskFactorCustom); }\n      const dangerSigns = getLatestDangerSignsForPregnancy(allReports, report);\n\n      const highRisk = isHighRiskPregnancy(allReports, report);\n\n      const mostRecentANC = getNewestReport(allReports, ['pregnancy', 'pregnancy_home_visit']);\n      const mostRecentANCDate = moment(mostRecentANC.reported_date);\n      const lmp_date = getMostRecentLMPDateForPregnancy(allReports, report);\n      const edd_ms = getMostRecentEDDForPregnancy(allReports, report);\n      const nextAncVisitDate = getNextANCVisitDate(allReports, report);\n      const weeksPregnant = lmp_date ? today.diff(lmp_date, 'weeks') : null;\n      let lmp_approx = getField(report, 'lmp_approx');\n      let reportDate = report.reported_date;\n      getSubsequentPregnancyFollowUps(allReports, report).forEach(function (followUpReport) {\n        //check if LMP was updated\n        if (followUpReport.reported_date > reportDate && getField(followUpReport, 'lmp_updated') === 'yes') {\n          reportDate = followUpReport.reported_date;\n          if (getField(followUpReport, 'lmp_method_approx')) {\n            lmp_approx = getField(followUpReport, 'lmp_method_approx');\n          }\n        }\n      });\n\n      const migratedReport = getRecentANCVisitWithEvent(allReports, report, 'migrated');\n      const refusedReport = getRecentANCVisitWithEvent(allReports, report, 'refused');\n      const stopReport = migratedReport || refusedReport;\n      if (stopReport) {\n        const clearAll = getField(stopReport, 'pregnancy_ended.clear_option') === 'clear_all';\n        fields.push(\n          { label: 'contact.profile.change_care', value: migratedReport ? 'Migrated out of area' : 'Refusing care', width: 6 },\n          { label: 'contact.profile.tasks_on_off', value: clearAll ? 'Off' : 'On', width: 6 }\n        );\n      }\n      fields.push(\n        { label: 'Weeks Pregnant', value: weeksPregnant || weeksPregnant === 0 ? { number: weeksPregnant, approximate: lmp_approx === 'yes' } : 'contact.profile.value.unknown', translate: !weeksPregnant && weeksPregnant !== 0, filter: weeksPregnant || weeksPregnant === 0 ? 'weeksPregnant' : '', width: 6 },\n        { label: 'contact.profile.edd', value: edd_ms ? edd_ms.valueOf() : 'contact.profile.value.unknown', translate: !edd_ms, filter: edd_ms ? 'simpleDate' : '', width: 6 }\n      );\n\n      if (highRisk) {\n        let riskValue = '';\n        if (!riskFactors && riskFactorsCustom) {\n          riskValue = riskFactorsCustom.join(', ');\n        }\n        else if (riskFactors.length > 1 || riskFactors && riskFactorsCustom) {\n          riskValue = 'contact.profile.risk.multiple';\n        }\n        else {\n          riskValue = 'contact.profile.danger_sign.' + riskFactors[0];\n        }\n        fields.push(\n          { label: 'contact.profile.risk.high', value: riskValue, translate: true, icon: 'icon-risk', width: 6 }\n        );\n      }\n\n      if (dangerSigns.length > 0) {\n        fields.push({ label: 'contact.profile.danger_signs.current', value: dangerSigns.length > 1 ? 'contact.profile.danger_sign.multiple' : 'contact.profile.danger_sign.' + dangerSigns[0], translate: true, width: 6 });\n      }\n\n      fields.push(\n        { label: 'contact.profile.visit', value: 'contact.profile.visits.of', context: { count: countANCFacilityVisits(allReports, report), total: 8 }, translate: true, width: 6 },\n        { label: 'contact.profile.last_visited', value: mostRecentANCDate.valueOf(), filter: 'relativeDay', width: 6 }\n      );\n\n      if (nextAncVisitDate && nextAncVisitDate.isSameOrAfter(today)) {\n        fields.push(\n          { label: 'contact.profile.anc.next', value: nextAncVisitDate.valueOf(), filter: 'simpleDate', width: 6 }\n        );\n      }\n\n      return fields;\n    },\n    modifyContext: function (ctx, report) {\n      let lmpDate = getField(report, 'lmp_date_8601');\n      let lmpMethodApprox = getField(report, 'lmp_method_approx');\n      let hivTested = getField(report, 'hiv_status_known');\n      let dewormingMedicationReceived = getField(report, 'deworming_med_received');\n      let ttReceived = getField(report, 'tt_received');\n      const riskFactorCodes = getAllRiskFactors(allReports, report);\n      const riskFactorsCustom = getAllRiskFactorExtra(allReports, report);\n      let pregnancyFollowupDateRecent = getField(report, 't_pregnancy_follow_up_date');\n\n      const followUps = getSubsequentPregnancyFollowUps(allReports, report);\n      followUps.forEach(function (followUpReport) {\n        if (getField(followUpReport, 'lmp_updated') === 'yes') {\n          lmpDate = getField(followUpReport, 'lmp_date_8601');\n          lmpMethodApprox = getField(followUpReport, 'lmp_method_approx');\n        }\n        hivTested = getField(followUpReport, 'hiv_status_known');\n        dewormingMedicationReceived = getField(followUpReport, 'deworming_med_received');\n        ttReceived = getField(followUpReport, 'tt_received');\n        if (getField(followUpReport, 't_pregnancy_follow_up') === 'yes') { pregnancyFollowupDateRecent = getField(followUpReport, 't_pregnancy_follow_up_date'); }\n\n      });\n      ctx.lmp_date_8601 = lmpDate;\n      ctx.lmp_method_approx = lmpMethodApprox;\n      ctx.is_active_pregnancy = true;\n      ctx.deworming_med_received = dewormingMedicationReceived;\n      ctx.hiv_tested_past = hivTested;\n      ctx.tt_received_past = ttReceived;\n      ctx.risk_factor_codes = riskFactorCodes.join(' ');\n      ctx.risk_factor_extra = riskFactorsCustom.join('; ');\n      ctx.pregnancy_follow_up_date_recent = pregnancyFollowupDateRecent;\n      ctx.pregnancy_uuid = report._id;\n    }\n  },\n\n  {\n    label: 'contact.profile.death.title',\n    appliesToType: 'person',\n    appliesIf: function () {\n      return !isAlive(thisContact);\n    },\n    fields: function () {\n      const fields = [];\n      let dateOfDeath;\n      let placeOfDeath;\n      const deathReport = getNewestReport(allReports, ['death_report']);\n      if (deathReport) {\n        const deathDetails = getField(deathReport, 'death_details');\n        if (deathDetails) {\n          dateOfDeath = deathDetails.date_of_death;\n          placeOfDeath = deathDetails.place_of_death;\n        }\n      }\n      else if (thisContact.date_of_death) {\n        dateOfDeath = thisContact.date_of_death;\n      }\n      fields.push(\n        { label: 'contact.profile.death.date', value: dateOfDeath ? dateOfDeath : 'contact.profile.value.unknown', filter: dateOfDeath ? 'simpleDate' : '', translate: dateOfDeath ? false : true, width: 6 },\n        { label: 'contact.profile.death.place', value: placeOfDeath ? placeOfDeath : 'contact.profile.value.unknown', translate: true, width: 6 }\n      );\n      return fields;\n    }\n  },\n  {\n    label: 'contact.profile.pregnancy.past',\n    appliesToType: 'report',\n    appliesIf: function (report) {\n      if (thisContact && thisContact.type !== 'person') { return false; }\n      if (report.form === 'delivery') { return true; }\n      if (report.form === 'pregnancy') {\n        //check if early end to pregnancy (miscarriage/abortion)\n        if (getRecentANCVisitWithEvent(allReports, report, 'abortion') || getRecentANCVisitWithEvent(allReports, report, 'miscarriage')) {\n          return true;\n        }\n        //check if 42 weeks past pregnancy and no delivery form submitted\n        const lmpDate = getMostRecentLMPDateForPregnancy(allReports, report);\n        return lmpDate && today.isSameOrAfter(lmpDate.clone().add(42, 'weeks')) && getSubsequentDeliveries(allReports, report, MAX_DAYS_IN_PREGNANCY).length === 0;\n\n      }\n      return false;\n    },\n    fields: function (report) {\n      const fields = [];\n      let relevantPregnancy;\n      let dateOfDelivery;\n      let placeOfDelivery = '';\n      let babiesDelivered = 0;\n      let babiesDeceased = 0;\n      let ancFacilityVisits = 0;\n\n      //if there was either a delivery, an early end to pregnancy or 42 weeks have passed\n      if (report.form === 'delivery') {\n        const deliveryReportDate = moment(report.reported_date);\n        relevantPregnancy = getFormArraySubmittedInWindow(allReports, ['pregnancy'], deliveryReportDate.clone().subtract(MAX_DAYS_IN_PREGNANCY, 'days').toDate(), deliveryReportDate.toDate())[0];\n\n        //If there was a delivery\n        if (getField(report, 'delivery_outcome')) {\n          dateOfDelivery = getDeliveryDate(report);\n          placeOfDelivery = getField(report, 'delivery_outcome.delivery_place');\n          babiesDelivered = getField(report, 'delivery_outcome.babies_delivered_num');\n          babiesDeceased = getField(report, 'delivery_outcome.babies_deceased_num');\n          fields.push(\n            { label: 'contact.profile.delivery_date', value: dateOfDelivery ? dateOfDelivery.valueOf() : '', filter: 'simpleDate', width: 6 },\n            { label: 'contact.profile.delivery_place', value: placeOfDelivery, translate: true, width: 6 },\n            { label: 'contact.profile.delivered_babies', value: babiesDelivered, width: 6 }\n          );\n        }\n      }\n      //if early end to pregnancy\n      else if (report.form === 'pregnancy') {\n        relevantPregnancy = report;\n        const lmpDate = getMostRecentLMPDateForPregnancy(allReports, relevantPregnancy);\n        const abortionReport = getRecentANCVisitWithEvent(allReports, relevantPregnancy, 'abortion');\n        const miscarriageReport = getRecentANCVisitWithEvent(allReports, relevantPregnancy, 'miscarriage');\n        const endReport = abortionReport || miscarriageReport;\n        if (endReport) {\n          let endReason = '';\n          let endDate = moment(0);\n          let weeksPregnantAtEnd = 0;\n          if (abortionReport) {\n            endReason = 'abortion';\n            endDate = moment(getField(abortionReport, 'pregnancy_ended.abortion_date'));\n          }\n          else {\n            endReason = 'miscarriage';\n            endDate = moment(getField(miscarriageReport, 'pregnancy_ended.miscarriage_date'));\n          }\n\n          weeksPregnantAtEnd = endDate.diff(lmpDate, 'weeks');\n          fields.push(\n            { label: 'contact.profile.pregnancy.end_early', value: endReason, translate: true, width: 6 },\n            { label: 'contact.profile.pregnancy.end_date', value: endDate.valueOf(), filter: 'simpleDate', width: 6 },\n            { label: 'contact.profile.pregnancy.end_weeks', value: weeksPregnantAtEnd > 0 ? weeksPregnantAtEnd : 'contact.profile.value.unknown', translate: weeksPregnantAtEnd <= 0, width: 6 }\n          );\n        }\n        //if no delivery form and past 42 weeks, display EDD as delivery date\n        else if (lmpDate && today.isSameOrAfter(lmpDate.clone().add(42, 'weeks')) && getSubsequentDeliveries(allReports, report, MAX_DAYS_IN_PREGNANCY).length === 0) {\n          dateOfDelivery = getMostRecentEDDForPregnancy(allReports, report);\n          fields.push({ label: 'contact.profile.delivery_date', value: dateOfDelivery ? dateOfDelivery.valueOf() : 'contact.profile.value.unknown', filter: 'simpleDate', translate: dateOfDelivery ? false : true, width: 6 });\n        }\n\n      }\n\n      if (babiesDeceased > 0) {\n        if (getField(report, 'baby_death')) {\n          fields.push({ label: 'contact.profile.deceased_babies', value: babiesDeceased, width: 6 });\n          let babyDeaths = getField(report, 'baby_death.baby_death_repeat');\n          if (!babyDeaths) { babyDeaths = []; }\n          let count = 0;\n          babyDeaths.forEach(function (babyDeath) {\n            if (count > 0) {\n              fields.push({ label: '', value: '', width: 6 });\n            }\n            fields.push(\n              { label: 'contact.profile.newborn.death_date', value: babyDeath.baby_death_date, filter: 'simpleDate', width: 6 },\n              { label: 'contact.profile.newborn.death_place', value: babyDeath.baby_death_place, translate: true, width: 6 },\n              { label: 'contact.profile.delivery.stillbirthQ', value: babyDeath.stillbirth, translate: true, width: 6 }\n            );\n            count++;\n            if (count === babyDeaths.length) {\n              fields.push({ label: '', value: '', width: 6 });\n            }\n          }\n          );\n\n        }\n      }\n\n      if (relevantPregnancy) {\n        ancFacilityVisits = countANCFacilityVisits(allReports, relevantPregnancy);\n        fields.push(\n          { label: 'contact.profile.anc_visit', value: ancFacilityVisits, width: 3 }\n        );\n\n        const highRisk = isHighRiskPregnancy(allReports, relevantPregnancy);\n        if (highRisk) {\n          let riskValue = '';\n          const riskFactors = getAllRiskFactors(allReports, relevantPregnancy);\n          const riskFactorsCustom = getAllRiskFactorExtra(allReports, relevantPregnancy);\n          if (!riskFactors && riskFactorsCustom) {\n            riskValue = riskFactorsCustom.join(', ');\n          }\n          else if (riskFactors.length > 1 || riskFactors && riskFactorsCustom) {\n            riskValue = 'contact.profile.risk.multiple';\n          }\n          else {\n            riskValue = 'contact.profile.danger_sign.' + riskFactors[0];\n          }\n          fields.push(\n            { label: 'contact.profile.risk.high', value: riskValue, translate: true, icon: 'icon-risk', width: 6 }\n          );\n        }\n      }\n\n      return fields;\n    }\n  }\n];\n\nmodule.exports = {\n  context: context,\n  cards: cards,\n  fields: fields\n};\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nconst moment = __webpack_require__(0);\nconst today = moment().startOf('day');\n\nconst isReportValid = function (report) {\n  if (report.form && report.fields && report.reported_date) { return true; }\n  return false;\n};\n\nconst pregnancyForms = ['pregnancy']; \n\nconst antenatalForms = ['pregnancy_home_visit'];\n\nconst deliveryForms = ['delivery'];\n\nconst pregnancDangerSignForms = ['pregnancy', 'pregnancy_home_visit', 'pregnancy_danger_sign', 'pregannacy_danger_sign_follow_up'];\n\n\nconst MAX_DAYS_IN_PREGNANCY = 42 * 7;\nconst AVG_DAYS_IN_PREGNANCY = 280;\n\nconst getField = (report, fieldPath) => ['fields', ...(fieldPath || '').split('.')]\n  .reduce((prev, fieldName) => {\n    if (prev === undefined) { return undefined; }\n    return prev[fieldName];\n  }, report);\n\nfunction getFormArraySubmittedInWindow(allReports, formArray, start, end) {\n  return allReports.filter(function (report) {\n    return formArray.includes(report.form) &&\n      report.reported_date >= start && report.reported_date <= end;\n  });\n}\n\n\nfunction getNewestReport(allReports, forms) {\n  let result;\n  allReports.forEach(function (report) {\n    if (!isReportValid(report) || !forms.includes(report.form)) { return; }\n    if (!result || report.reported_date > result.reported_date) {\n      result = report;\n    }\n  });\n  return result;\n}\n\n\nfunction getLMPDateFromPregnancy(report) {\n  return isPregnancyForm(report) && getField(report, 'lmp_date_8601') && moment(getField(report, 'lmp_date_8601'));\n}\n\nfunction getLMPDateFromPregnancyFollowUp(report) {\n  return isPregnancyFollowUpForm(report) && getField(report, 'lmp_date_8601') && moment(getField(report, 'lmp_date_8601'));\n}\n\nfunction getMostRecentLMPDateForPregnancy(allReports, pregnancyReport) {\n  let mostRecentLMP = getLMPDateFromPregnancy(pregnancyReport);\n  let mostRecentReportDate = pregnancyReport.reported_date;\n  getSubsequentPregnancyFollowUps(allReports, pregnancyReport).forEach(function (visit) {\n    const lmpFromPregnancyFollowUp = getLMPDateFromPregnancyFollowUp(visit);\n    if (visit.reported_date > mostRecentReportDate && getField(visit, 'lmp_updated') === 'yes') {\n      mostRecentReportDate = visit.reported_date;\n      mostRecentLMP = lmpFromPregnancyFollowUp;\n    }\n  });\n  return mostRecentLMP;\n}\n\nfunction getMostRecentEDDForPregnancy(allReports, report) {\n  const lmpDate = getMostRecentLMPDateForPregnancy(allReports, report);\n  if (lmpDate) {\n    return lmpDate.clone().add(AVG_DAYS_IN_PREGNANCY, 'days');\n  }\n}\n\nfunction getDeliveryDate(report) {\n  return isDeliveryForm(report) && getField(report, 'delivery_outcome.delivery_date') && moment(getField(report, 'delivery_outcome.delivery_date'));\n}\n\nfunction getNextANCVisitDate(allReports, report) {\n  let nextVisit = getField(report, 't_pregnancy_follow_up_date');\n  let eddReportDate = report.reported_date;\n  const followUps = getSubsequentPregnancyFollowUps(allReports, report);\n  followUps.forEach(function (followUpReport) {\n    if (followUpReport.reported_date > eddReportDate && !!getField(followUpReport, 't_pregnancy_follow_up_date')) {\n      eddReportDate = followUpReport.reported_date;\n      nextVisit = getField(followUpReport, 't_pregnancy_follow_up_date');\n    }\n  });\n  return moment(nextVisit);\n}\n\n\nfunction getDangerSignCodes(report) {\n  const dangerSignCodes = [];\n  if (getField(report, 't_danger_signs_referral_follow_up') === 'yes') {\n    const dangerSignsObj = getField(report, 'danger_signs');\n    if (dangerSignsObj) {\n      for (const dangerSign in dangerSignsObj) {\n        if (dangerSignsObj[dangerSign] === 'yes' && dangerSign !== 'r_danger_sign_present') {\n          dangerSignCodes.push(dangerSign);\n        }\n      }\n    }\n  }\n  return dangerSignCodes;\n}\n\nfunction getLatestDangerSignsForPregnancy(allReports, pregnancy) {\n  if (!pregnancy) { return []; }\n  let lmpDate = getMostRecentLMPDateForPregnancy(allReports, pregnancy);\n  if (!lmpDate) { lmpDate = moment(pregnancy.reported_date); } //If unknown, take preganacy.reported_date\n  const allReportsWithDangerSigns = getFormArraySubmittedInWindow(allReports, pregnancDangerSignForms, lmpDate.toDate(), lmpDate.clone().add(MAX_DAYS_IN_PREGNANCY, 'days').toDate());\n  const allRelevantReports = [];\n  allReportsWithDangerSigns.forEach((report) => {\n    if (isPregnancyFollowUpForm(report)) {\n      //only push pregnancy home visit report that have actually been visited\n      if (getField(report, 'pregnancy_summary.visit_option') === 'yes') {\n        allRelevantReports.push(report);\n      }\n    }\n    //for other reports with danger signs, push without checking for visit\n    else {\n      allRelevantReports.push(report);\n    }\n  });\n  const recentReport = getNewestReport(allRelevantReports, pregnancDangerSignForms);\n  if (!recentReport) { return []; }\n  return getDangerSignCodes(recentReport);\n}\n\n\nfunction getRiskFactorsFromPregnancy(report) {\n  const riskFactors = [];\n  if (!isPregnancyForm(report)) { return []; }\n  if (getField(report, 'risk_factors.r_risk_factor_present') === 'yes') {\n    if (getField(report, 'risk_factors.risk_factors_history.first_pregnancy') === 'yes') {\n      riskFactors.push('first_pregnancy');\n    }\n    if (getField(report, 'risk_factors.risk_factors_history.previous_miscarriage') === 'yes') {\n      riskFactors.push('previous_miscarriage');\n    }\n    const riskFactorsPrimary = getField(report, 'risk_factors.risk_factors_present.primary_condition');\n    const riskFactorsSecondary = getField(report, 'risk_factors.risk_factors_present.secondary_condition');\n    if (riskFactorsPrimary) {\n      riskFactors.push(...riskFactorsPrimary.split(' '));\n    }\n    else if (riskFactorsSecondary) {\n      riskFactors.push(...riskFactorsSecondary.split(' '));\n    }\n  }\n  return riskFactors;\n}\n\nfunction getNewRiskFactorsFromFollowUps(report) {\n  const riskFactors = [];\n  if (!isPregnancyFollowUpForm(report)) { return []; }\n  if (getField(report, 'anc_visits_hf.risk_factors.r_risk_factor_present') === 'yes') {\n    const newRiskFactors = getField(report, 'anc_visits_hf.risk_factors.new_risks');\n    if (newRiskFactors) {\n      riskFactors.push(...newRiskFactors.split(' '));\n    }\n  }\n  return riskFactors;\n}\n\nfunction getAllRiskFactors(allReports, pregnancy) {\n  const riskFactorCodes = getRiskFactorsFromPregnancy(pregnancy);\n  const pregnancyFollowUps = getSubsequentPregnancyFollowUps(allReports, pregnancy);\n  pregnancyFollowUps.forEach(function (visit) {\n    riskFactorCodes.push(...getNewRiskFactorsFromFollowUps(visit));\n  });\n  return riskFactorCodes;\n}\n\nfunction getRiskFactorExtra(report) {\n  let extraRisk;\n  if (report && isPregnancyForm(report)) {\n    extraRisk = getField(report, 'risk_factors.risk_factors_present.additional_risk');\n  }\n  else if (report && isPregnancyFollowUpForm(report)) {\n    extraRisk = getField(report, 'anc_visits_hf.risk_factors.additional_risk');\n  }\n  return extraRisk;\n}\n\nfunction getAllRiskFactorExtra(allReports, pregnancy) {\n  const riskFactorsExtra = [];\n  const riskFactorExtraFromPregnancy = getRiskFactorExtra(pregnancy);\n  if (riskFactorExtraFromPregnancy) {\n    riskFactorsExtra.push(riskFactorExtraFromPregnancy);\n  }\n  const pregnancyFollowUps = getSubsequentPregnancyFollowUps(allReports, pregnancy);\n  pregnancyFollowUps.forEach(function (visit) {\n    const riskFactorExtraFromVisit = getRiskFactorExtra(visit);\n    if (riskFactorExtraFromVisit) {\n      riskFactorsExtra.push(riskFactorExtraFromVisit);\n    }\n  });\n  return riskFactorsExtra;\n}\n\nconst isHighRiskPregnancy = function (allReports, pregnancy) {\n  return getAllRiskFactors(allReports, pregnancy).length ||\n    getAllRiskFactorExtra(allReports, pregnancy).length ||\n    getDangerSignCodes(pregnancy).length;\n};\n\nfunction isAlive(thisContact) {\n  return thisContact && !thisContact.date_of_death;\n}\n\nfunction isPregnancyForm(report) {\n  return report && pregnancyForms.includes(report.form);\n}\n\nfunction isPregnancyFollowUpForm(report) {\n  return report && antenatalForms.includes(report.form);\n}\n\nfunction isDeliveryForm(report) {\n  return report && deliveryForms.includes(report.form);\n}\n\nfunction getSubsequentPregnancies(allReports, refReport) {\n  return allReports.filter(function (report) {\n    return isPregnancyForm(report) && report.reported_date > refReport.reported_date;\n  });\n}\n\nfunction isActivePregnancy(thisContact, allReports, report) {\n  if (thisContact.type !== 'person' || !isAlive(thisContact) || !isPregnancyForm(report)) { return false; }\n  const lmpDate = getMostRecentLMPDateForPregnancy(allReports, report) || report.reported_date;\n  const isPregnancyRegisteredWithin9Months = lmpDate > today.clone().subtract(MAX_DAYS_IN_PREGNANCY, 'day');\n  const isPregnancyTerminatedByDeliveryInLast6Weeks = getSubsequentDeliveries(allReports, report, 6 * 7).length > 0;\n  const isPregnancyTerminatedByAnotherPregnancyReport = getSubsequentPregnancies(allReports, report).length > 0;\n  return isPregnancyRegisteredWithin9Months &&\n    !isPregnancyTerminatedByDeliveryInLast6Weeks &&\n    !isPregnancyTerminatedByAnotherPregnancyReport &&\n    !getRecentANCVisitWithEvent(allReports, report, 'abortion') &&\n    !getRecentANCVisitWithEvent(allReports, report, 'miscarriage');\n}\n\nfunction isPregnant(allReports) {\n  return allReports.some(report => isActivePregnancy(report));\n}\n\nfunction isReadyForNewPregnancy(thisContact, allReports) {\n  if (thisContact.type !== 'person') { return false; }\n  const mostRecentPregnancyReport = getNewestReport(allReports, pregnancyForms);\n  const mostRecentDeliveryReport = getNewestReport(allReports, deliveryForms);\n  if (!mostRecentPregnancyReport && !mostRecentDeliveryReport) {\n    return true; //No previous pregnancy or delivery recorded, fresh profile\n  }\n\n  else if (!mostRecentPregnancyReport) {\n    //Delivery report without pregnancy report\n    //Decide on the basis of Delivery report\n\n    if (mostRecentDeliveryReport && getDeliveryDate(mostRecentDeliveryReport) < today.clone().subtract(6 * 7, 'day')) {\n      return true; //Delivery date on most recentlty submitted delivery form is more than 6 weeks ago\n    }\n  }\n\n  else if (!mostRecentDeliveryReport || mostRecentDeliveryReport.reported_date < mostRecentPregnancyReport.reported_date) {\n    //Pregnancy report without delivery report, or Pregnancy report newer than Delivery report\n    //Decide on the basis of Pregnancy report\n\n    let mostRecentlySubmittedLMPDate = getMostRecentLMPDateForPregnancy(allReports, mostRecentPregnancyReport);\n    if (!mostRecentlySubmittedLMPDate) {\n      mostRecentlySubmittedLMPDate = moment(mostRecentPregnancyReport.reported_date);\n    }\n    if (mostRecentlySubmittedLMPDate < today.clone().subtract(MAX_DAYS_IN_PREGNANCY, 'day')) {\n      return true;\n      //Most recently submitted LMP is more than 294 days (42 weeks) ago\n    }\n    if (getRecentANCVisitWithEvent(allReports, mostRecentPregnancyReport, 'abortion') ||\n      getRecentANCVisitWithEvent(allReports, mostRecentPregnancyReport, 'miscarriage')) {\n      return true;\n    }\n  }\n\n  else {\n    //Both pregnancy and delivery report, Delivery report is newer than pregnancy report\n    //Decide on the basis of Delivery report\n    if (mostRecentPregnancyReport && getRecentANCVisitWithEvent(allReports, mostRecentPregnancyReport, 'abortion') ||\n      getRecentANCVisitWithEvent(allReports, mostRecentPregnancyReport, 'miscarriage')) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isReadyForDelivery(thisContact, allReports) {\n  //If pregnancy registration, date of LMP should be at least 6 months ago and no more than EDD + 6 weeks. \n  //If pregnancy registration and no LMP, make it available at registration and until 280 days + 6 weeks from the date of registration. \n  //If no pregnancy registration, previous delivery date should be at least 7 months ago.\n  if (thisContact.type !== 'person') { return false; }\n  const latestPregnancy = getNewestReport(allReports, pregnancyForms);\n  const latestDelivery = getNewestReport(allReports, deliveryForms);\n  if (!latestPregnancy && !latestDelivery) {\n    //no previous pregnancy, no previous delivery\n    return true;\n  }\n  else if (latestDelivery && (!latestPregnancy || latestDelivery.reported_date > latestPregnancy.reported_date)) {\n    //no pregnancy registration, previous delivery date should be at least 7 months ago.\n    return getDeliveryDate(latestDelivery) < today.clone().subtract(7, 'months');\n  }\n\n  else if (latestPregnancy) {\n    if (isPregnancyForm(latestPregnancy)) {\n      const lmpDate = getMostRecentLMPDateForPregnancy(allReports, latestPregnancy);\n      if (!lmpDate) {//no LMP, show until 280 days + 6 weeks from the date of registration\n        return moment(latestPregnancy.reported_date).clone().startOf('day').add(280 + 6 * 7, 'days').isSameOrBefore(today);\n      }\n      else {//Pregnancy registration with LMP\n        const edd = getMostRecentEDDForPregnancy(allReports, latestPregnancy);\n        //at least 6 months ago, no more than EDD + 6 weeks\n        return today.isBetween(lmpDate.clone().add(6, 'months'), edd.clone().add(6, 'weeks'));\n      }\n    }\n  }\n  return false;\n}\n\nfunction getRecentANCVisitWithEvent(allReports, pregnancyReport, event) {\n  //event can be one of miscarriage, abortion, refused, migrated\n  const followUps = getSubsequentPregnancyFollowUps(allReports, pregnancyReport);\n  const latestFollowup = getNewestReport(followUps, antenatalForms);\n  if (latestFollowup && getField(latestFollowup, 'pregnancy_summary.visit_option') === event) {\n    return latestFollowup;\n  }\n}\n\nfunction getSubsequentDeliveries(allReports, pregnancyReport, withinLastXDays) {\n  return allReports.filter(function (report) {\n    return (isDeliveryForm(report)) &&\n      report.reported_date > pregnancyReport.reported_date &&\n      (!withinLastXDays || report.reported_date >= (today.clone().subtract(withinLastXDays, 'days')));\n  });\n}\n\nfunction getSubsequentPregnancyFollowUps(allReports, pregnancyReport) {\n  let lmpDate = getLMPDateFromPregnancy(pregnancyReport);\n  if (!lmpDate) { //LMP Date is not available, use reported date\n    lmpDate = moment(pregnancyReport.reported_date);\n  }\n  const subsequentVisits = allReports.filter(function (visitReport) {\n    return isPregnancyFollowUpForm(visitReport) &&\n      visitReport.reported_date > pregnancyReport.reported_date &&\n      moment(visitReport.reported_date) < lmpDate.clone().add(MAX_DAYS_IN_PREGNANCY, 'days');\n  });\n  return subsequentVisits;\n}\n\nfunction countANCFacilityVisits(allReports, pregnancyReport) {\n  let ancHFVisits = 0;\n  const pregnancyFollowUps = getSubsequentPregnancyFollowUps(allReports, pregnancyReport);\n  if (getField(pregnancyReport, 'anc_visits_hf.anc_visits_hf_past') && !isNaN(getField(pregnancyReport, 'anc_visits_hf.anc_visits_hf_past.visited_hf_count'))) {\n    ancHFVisits += parseInt(getField(pregnancyReport, 'anc_visits_hf.anc_visits_hf_past.visited_hf_count'));\n  }\n  ancHFVisits += pregnancyFollowUps.reduce(function (sum, report) {\n    const pastANCHFVisits = getField(report, 'anc_visits_hf.anc_visits_hf_past');\n    if (!pastANCHFVisits) { return 0; }\n    sum += pastANCHFVisits.last_visit_attended === 'yes' && 1;\n    if (isNaN(pastANCHFVisits.visited_hf_count)) { return sum; }\n    return sum += pastANCHFVisits.report_other_visits === 'yes' && parseInt(pastANCHFVisits.visited_hf_count);\n  },\n  0);\n  return ancHFVisits;\n}\n\nfunction knowsHIVStatusInPast3Months(allReports) {\n  let knows = false;\n  const pregnancyFormsIn3Months = getFormArraySubmittedInWindow(allReports, pregnancyForms, today.clone().subtract(3, 'months'), today);\n  pregnancyFormsIn3Months.forEach(function (report) {\n    if (getField(report, 'pregnancy_new_or_current.hiv_status.hiv_status_know') === 'yes') {\n      knows = true;\n    }\n  });\n  return knows;\n}\n\nmodule.exports = {\n  today,\n  MAX_DAYS_IN_PREGNANCY,\n  isHighRiskPregnancy,\n  getNewestReport,\n  getSubsequentPregnancyFollowUps,\n  getSubsequentDeliveries,\n  isAlive,\n  isPregnant,\n  isActivePregnancy,\n  countANCFacilityVisits,\n  knowsHIVStatusInPast3Months,\n  getAllRiskFactors,\n  getAllRiskFactorExtra,\n  getDangerSignCodes,\n  getLatestDangerSignsForPregnancy,\n  getNextANCVisitDate,\n  isReadyForNewPregnancy,\n  isReadyForDelivery,\n  getMostRecentLMPDateForPregnancy,\n  getMostRecentEDDForPregnancy,\n  getDeliveryDate,\n  getFormArraySubmittedInWindow,\n  getRecentANCVisitWithEvent,\n  getField\n};\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\nfunction emitter(contactSummary, contact, reports) {\n  var fields = contactSummary.fields || [];\n  var context = contactSummary.context || {};\n  var cards = contactSummary.cards || [];\n\n  var contactType = contact && (contact.contact_type || contact.type);\n\n  var result = {\n    cards: [],\n    fields: fields.filter(function(f) {\n      var appliesToType = convertToArray(f.appliesToType);\n      var appliesToNotType = appliesToType.filter(function(type) {\n        return type && type.charAt(0) === '!';\n      });\n      if (appliesToType.includes(contactType) ||\n          (appliesToNotType.length > 0 && !appliesToNotType.includes('!' + contactType))) {\n        if (!f.appliesIf || f.appliesIf()) {\n          delete f.appliesToType;\n          delete f.appliesIf;\n          return true;\n        }\n      }\n    }),\n  };\n\n  cards.forEach(function(card) {\n    var idx1, r, added;\n\n    var appliesToType = convertToArray(card.appliesToType);\n\n    if (appliesToType.includes('report') && appliesToType.length > 1) {\n      throw new Error(\"You cannot set appliesToType to an array which includes the type 'report' and another type.\");\n    }\n    \n    if (appliesToType.includes('report')) {\n      for (idx1=0; idx1<reports.length; ++idx1) {\n        r = reports[idx1];\n        if (!isReportValid(r)) {\n          continue;\n        }\n\n        added = addCard(card, context, r);\n        if (added) {\n          result.cards.push(added);\n        }\n      }\n    } else {\n      if (!appliesToType.includes(contactType)) {\n        return;\n      }\n\n      added = addCard(card, context);\n      if (added) {\n        result.cards.push(added);\n      }\n    }\n  });\n\n  result.context = context;\n\n  // return the result for 2.13+ as per #2635\n  return result;\n}\n\nfunction convertToArray(appliesToType) {\n  return Array.isArray(appliesToType) ? appliesToType : [appliesToType];  \n}\n\nfunction isReportValid(report) {\n  // valid XForms won't have .errors field\n  // valid JSON forms will have empty array errors:[]\n  return report && !(report.errors && report.errors.length);\n}\n\nfunction execAppliesIf(prop, report) {\n  switch(typeof prop) {\n    case 'undefined': return true;\n    case 'function':  return prop(report);\n    default:          return prop;\n  }\n}\n\nfunction addCard(card, context, r) {\n  if (!execAppliesIf(card.appliesIf, r)) {\n    return;\n  }\n\n  function addValue(src, dst, prop) {\n    switch(typeof src[prop]) {\n      case 'undefined': return;\n      case 'function': dst[prop] = src[prop](r); break;\n      default: dst[prop] = src[prop];\n    }\n  }\n\n  var fields = typeof card.fields === 'function' ?\n      card.fields(r) :\n      card.fields\n        .filter(function(f) {\n          return execAppliesIf(f.appliesIf, r);\n        })\n        .map(function(f) {\n          var ret = {};\n          addValue(f, ret, 'label');\n          addValue(f, ret, 'value');\n          addValue(f, ret, 'translate');\n          addValue(f, ret, 'filter');\n          addValue(f, ret, 'width');\n          addValue(f, ret, 'icon');\n          if (f.context) {\n            ret.context = {};\n            addValue(f.context, ret.context, 'count');\n            addValue(f.context, ret.context, 'total');\n          }\n          return ret;\n        });\n\n  if (card.modifyContext) {\n    card.modifyContext(context, r);\n  }\n\n  return {\n    label: card.label,\n    fields: fields,\n  };\n}\n\nmodule.exports = emitter;\n\n\n/***/ })\n/******/ ]);\n}); return ContactSummary;",
  "tasks": {
    "rules": "define Target { _id: null, contact: null, deleted: null, type: null, pass: null, date: null, groupBy: null }\ndefine Contact { contact: null, reports: null, tasks: null }\ndefine Task { _id: null, deleted: null, doc: null, contact: null, icon: null, date: null, readyStart: null, readyEnd: null, title: null, fields: null, resolved: null, priority: null, priorityLabel: null, reports: null, actions: null }\nrule GenerateEvents {\n  when { c: Contact } then { /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n//const moment = require('moment');\nconst today = getDateMS(Date.now());\nconst MS_IN_DAY = 24 * 60 * 60 * 1000;\nconst MAX_DAYS_IN_PREGNANCY = 42 * 7;  // 42 weeks = 294 days\nconst pregnancyForms = ['pregnancy'];\nconst deliveryForms = ['delivery'];\nconst antenatalForms = ['pregnancy_home_visit'];\nconst allANCForms = ['pregnancy', 'pregnancy_home_visit', 'pregnancy_facility_visit_reminder',\n  'pregnancy_danger_sign', 'pregnancy_danger_sign_follow_up', 'delivery'];\n\nfunction isAlive(contact) {\n  return contact && contact.contact && !contact.contact.date_of_death;\n}\n\nconst getField = (report, fieldPath) => ['fields', ...(fieldPath || '').split('.')]\n  .reduce((prev, fieldName) => {\n    if (prev === undefined) { return undefined; }\n    return prev[fieldName];\n  }, report);\n\nfunction isFormArraySubmittedInWindow(reports, formArray, start, end, count) {\n  let found = false;\n  let reportCount = 0;\n  reports.forEach(function (report) {\n    if (formArray.includes(report.form)) {\n      if (report.reported_date >= start && report.reported_date <= end) {\n        found = true;\n        if (count) {\n          reportCount++;\n        }\n      }\n    }\n  });\n\n  if (count) { return reportCount >= count; }\n  return found;\n}\n\n\nfunction isFormArraySubmittedInWindowExcludingThisReport(reports, formArray, start, end, exReport, count) {\n  let found = false;\n  let reportCount = 0;\n  reports.forEach(function (report) {\n    if (formArray.includes(report.form)) {\n      if (report.reported_date >= start && report.reported_date <= end && report._id !== exReport._id) {\n        found = true;\n        if (count) {\n          reportCount++;\n        }\n      }\n    }\n  });\n  if (count) { return reportCount >= count; }\n  else { return found; }\n}\n\n\nfunction getMostRecentReport(reports, form) {\n  let result;\n  reports.forEach(function (report) {\n    if (form.includes(report.form) &&\n      !report.deleted &&\n      (!result || report.reported_date > result.reported_date)) {\n      result = report;\n    }\n  });\n  return result;\n}\n\nfunction getNewestPregnancyTimestamp(contact) {\n  if (!contact.contact) { return; }\n  const newestPregnancy = getMostRecentReport(contact.reports, 'pregnancy');\n  return newestPregnancy ? newestPregnancy.reported_date : 0;\n}\n\nfunction getNewestDeliveryTimestamp(contact) {\n  if (!contact.contact) { return; }\n  const newestDelivery = getMostRecentReport(contact.reports, 'delivery');\n  return newestDelivery ? newestDelivery.reported_date : 0;\n}\n\nfunction isFacilityDelivery(contact, report) {\n  if (!contact) {\n    return false;\n  }\n  if (arguments.length === 1) { report = contact; }\n  return getField(report, 'facility_delivery') === 'yes';\n}\n\nfunction countReportsSubmittedInWindow(reports, form, start, end, condition) {\n  let reportsFound = 0;\n  reports.forEach(function (report) {\n    if (form.includes(report.form)) {\n      if (report.reported_date >= start && report.reported_date <= end) {\n        if (!condition || condition(report)) {\n          reportsFound++;\n        }\n      }\n    }\n  });\n  return reportsFound;\n}\n\nfunction getReportsSubmittedInWindow(reports, form, start, end, condition) {\n  const reportsFound = [];\n  reports.forEach(function (report) {\n    if (form.includes(report.form)) {\n      if (report.reported_date >= start && report.reported_date <= end) {\n        if (!condition || condition(report)) {\n          reportsFound.push(report);\n        }\n      }\n    }\n  });\n  return reportsFound;\n}\n\n\nfunction getDateISOLocal(s) {\n  if (!s) { return new Date(); }\n  const b = s.split(/\\D/);\n  const d = new Date(b[0], b[1] - 1, b[2]);\n  if (isValidDate(d)) { return d; }\n  return new Date();\n}\n\nfunction getTimeForMidnight(d) {\n  const date = new Date(d);\n  date.setHours(0);\n  date.setMinutes(0);\n  date.setSeconds(0);\n  date.setMilliseconds(0);\n  return date;\n}\n\nfunction getDateMS(d) {\n  if (typeof d === 'string') {\n    if (d === '') { return null; }\n    d = getDateISOLocal(d);\n  }\n  return getTimeForMidnight(d).getTime();\n}\n\nfunction isValidDate(d) {\n  return d instanceof Date && !isNaN(d);\n}\n\nfunction addDays(date, days) {\n  const result = getTimeForMidnight(new Date(date));\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nfunction isPregnancyForm(report) {\n  return pregnancyForms.includes(report.form);\n}\n\nfunction isPregnancyFollowUpForm(report) {\n  return antenatalForms.includes(report.form);\n}\n\nfunction isDeliveryForm(report) {\n  return deliveryForms.includes(report.form);\n}\n\nconst getNewestReport = function (reports, forms) {\n  let result;\n  reports.forEach(function (report) {\n    if (!forms.includes(report.form)) { return; }\n    if (!result || report.reported_date > result.reported_date) {\n      result = report;\n    }\n  });\n  return result;\n};\n\nconst getLMPDateFromPregnancy = function (report) {\n  return isPregnancyForm(report) &&\n    getDateMS(getField(report, 'lmp_date_8601'));\n};\n\nconst getLMPDateFromPregnancyFollowUp = function (report) {\n  return isPregnancyFollowUpForm(report) &&\n    getDateMS(getField(report, 'lmp_date_8601'));\n};\n\n\n\nfunction getSubsequentPregnancies(contact, refReport) {\n  return contact.reports.filter(function (report) {\n    return isPregnancyForm(report) && report.reported_date > refReport.reported_date;\n  });\n}\n\nfunction getSubsequentPregnancyFollowUps(contact, report) {\n  const subsequentVisits = contact.reports.filter(function (visit) {\n    let lmpDate = getLMPDateFromPregnancy(report);\n    if (!lmpDate) { //LMP Date is not available, use reported date\n      lmpDate = report.reported_date;\n    }\n\n    return isPregnancyFollowUpForm(visit) &&\n      visit.reported_date > report.reported_date &&\n      visit.reported_date < addDays(lmpDate, MAX_DAYS_IN_PREGNANCY);\n  });\n  return subsequentVisits;\n}\n\nfunction getSubsequentDeliveries(contact, refReport, withinLastXDays) {\n  return contact.reports.filter(function (deliveryReport) {\n    return (deliveryReport.form === 'delivery') &&\n      deliveryReport.reported_date > refReport.reported_date &&\n      (!withinLastXDays || refReport.reported_date >= (today - withinLastXDays * MS_IN_DAY));\n  });\n}\n\nfunction getMostRecentLMPDateForPregnancy(contact, report) {\n  let mostRecentLMP = getLMPDateFromPregnancy(report);\n  let mostRecentReportDate = report.reported_date;\n  getSubsequentPregnancyFollowUps(contact, report).forEach(function (v) {\n    const lmpFromPregnancyFollowUp = getLMPDateFromPregnancyFollowUp(v);\n    if (v.reported_date > mostRecentReportDate && lmpFromPregnancyFollowUp !== '' && lmpFromPregnancyFollowUp !== mostRecentLMP) {\n      mostRecentReportDate = v.reported_date;\n      mostRecentLMP = lmpFromPregnancyFollowUp;\n    }\n  });\n  return mostRecentLMP;\n}\n\n\nfunction isPregnancyTerminatedByAbortion(contact, report) {\n  const followUps = getSubsequentPregnancyFollowUps(contact, report);\n  const latestFollowup = getNewestReport(followUps, antenatalForms);\n  return latestFollowup && getField(latestFollowup, 'pregnancy_summary.visit_option') === 'abortion';\n}\n\nfunction isPregnancyTerminatedByMiscarriage(contact, report) {\n  const followUps = getSubsequentPregnancyFollowUps(contact, report);\n  const latestFollowup = getNewestReport(followUps, antenatalForms);\n  return latestFollowup && getField(latestFollowup, 'pregnancy_summary.visit_option') === 'miscarriage';\n}\n\nfunction isActivePregnancy(contact, report) {\n  if (!isPregnancyForm(report)) { return false; }\n  const lmpDate = getMostRecentLMPDateForPregnancy(contact, report) || report.reported_date;\n  const isPregnancyRegisteredWithin9Months = lmpDate > today - MAX_DAYS_IN_PREGNANCY * MS_IN_DAY;\n  const isPregnancyTerminatedByDeliveryInLast6Weeks = getSubsequentDeliveries(contact, report, 6 * 7).length > 0;\n  const isPregnancyTerminatedByAnotherPregnancyReport = getSubsequentPregnancies(contact, report).length > 0;\n  return isPregnancyRegisteredWithin9Months &&\n    !isPregnancyTerminatedByDeliveryInLast6Weeks &&\n    !isPregnancyTerminatedByAnotherPregnancyReport &&\n    !isPregnancyTerminatedByAbortion(contact, report) &&\n    !isPregnancyTerminatedByMiscarriage(contact, report);\n}\n\nfunction countANCFacilityVisits(contact, pregnancyReport) {\n  let ancHFVisits = 0;\n  const pregnancyFollowUps = getSubsequentPregnancyFollowUps(contact, pregnancyReport);\n  if (getField(pregnancyReport, 'anc_visits_hf.anc_visits_hf_past') && !isNaN(getField(pregnancyReport, 'anc_visits_hf.anc_visits_hf_past.visited_hf_count'))) {\n    ancHFVisits += parseInt(getField(pregnancyReport, 'anc_visits_hf.anc_visits_hf_past.visited_hf_count'));\n  }\n  ancHFVisits += pregnancyFollowUps.reduce(function (sum, report) {\n    const pastANCHFVisits = getField(report, 'anc_visits_hf.anc_visits_hf_past');\n    if (!pastANCHFVisits) { return 0; }\n    sum += pastANCHFVisits.last_visit_attended === 'yes' && 1;\n    if (isNaN(pastANCHFVisits.visited_hf_count)) { return sum; }\n    return sum += pastANCHFVisits.report_other_visits === 'yes' && parseInt(pastANCHFVisits.visited_hf_count);\n  },\n  0);\n  return ancHFVisits;\n}\n\nfunction getRecentANCVisitWithEvent(contact, report, event) {\n  //event should be one among miscarriage, abortion, refused, migrated\n  const followUps = getSubsequentPregnancyFollowUps(contact, report);\n  const latestFollowup = getNewestReport(followUps, antenatalForms);\n  if (latestFollowup && getField(latestFollowup, 'pregnancy_summary.visit_option') === event) {\n    return latestFollowup;\n  }\n}\n\nfunction isPregnancyTaskMuted(contact) {\n  const latestVisit = getNewestReport(contact.reports, allANCForms);\n  return latestVisit && isPregnancyFollowUpForm(latestVisit) &&\n    getField(latestVisit, 'pregnancy_ended.clear_option') === 'clear_all';\n}\n\nmodule.exports = {\n  today,\n  MS_IN_DAY,\n  MAX_DAYS_IN_PREGNANCY,\n  addDays,\n  isAlive,\n  getTimeForMidnight,\n  isFormArraySubmittedInWindow,\n  isFormArraySubmittedInWindowExcludingThisReport,\n  getDateMS,\n  getDateISOLocal,\n  isDeliveryForm,\n  getMostRecentReport,\n  getNewestPregnancyTimestamp,\n  getNewestDeliveryTimestamp,\n  getReportsSubmittedInWindow,\n  countReportsSubmittedInWindow,\n  countANCFacilityVisits,\n  isFacilityDelivery,\n  getMostRecentLMPDateForPregnancy,\n  getNewestReport,\n  getSubsequentPregnancyFollowUps,\n  isActivePregnancy,\n  getRecentANCVisitWithEvent,\n  isPregnancyTaskMuted,\n  getField\n};\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/*\nDeclarative tasks and targets (the elements exported by partner task.js and target.js files), are complex objects containing functions. \nDefinition-preparation.js binds a value for `this` in all the functions within a definition. \nThis fascilitates simple data sharing between functions, and allows function logic to reference the definition itself.\n*/\n\nfunction prepare(definition) {\n  var targetContext = {};\n  bindAllFunctionsToContext(definition, targetContext);\n  targetContext.definition = deepCopy(definition);\n}\n\nfunction bindAllFunctionsToContext(obj, context) {\n  var keys = Object.keys(obj);\n  for (var i in keys) {\n    var key = keys[i];\n    switch(typeof obj[key]) {\n      case 'object':\n        bindAllFunctionsToContext(obj[key], context);\n        break;\n      case 'function':\n        obj[key] = obj[key].bind(context);\n        break;\n    }\n  }\n}\n\nfunction deepCopy(obj) {\n  var copy = Object.assign({}, obj);\n  var keys = Object.keys(copy);\n  for (var i in keys) {\n    var key = keys[i];\n    if (Array.isArray(copy[key])) {\n      copy[key] = copy[key].slice(0);\n      for (var j = 0; j < copy[key].length; ++j) {\n        if (typeof copy[key][j] === 'object') {\n          copy[key][j] = deepCopy(copy[key][j]);\n        }\n      }\n    } else if (typeof copy[key] === 'object') {\n      copy[key] = deepCopy(copy[key]);\n    }\n  }\n  return copy;\n}\n\nmodule.exports = prepare;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* global c, emit, Task, Target */\n\nvar tasks = __webpack_require__(3);\nvar targets = __webpack_require__(4);\n\nvar taskEmitter = __webpack_require__(5); \nvar targetEmitter = __webpack_require__(6);\n\ntargetEmitter(targets, c, Utils, Target, emit);\ntaskEmitter(tasks, c, Utils, Task, emit);\n\nemit('_complete', { _id: true });\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nconst extras = __webpack_require__(0);\n\nconst {\n  MAX_DAYS_IN_PREGNANCY,\n  today,\n  getNewestPregnancyTimestamp,\n  getNewestDeliveryTimestamp,\n  isAlive,\n  isFormArraySubmittedInWindow,\n  getDateISOLocal,\n  getTimeForMidnight,\n  isDeliveryForm,\n  getMostRecentLMPDateForPregnancy,\n  addDays,\n  getRecentANCVisitWithEvent,\n  isPregnancyTaskMuted,\n  getField\n} = extras;\n\nconst generateEventForHomeVisit = (week, start, end) => ({\n  id: `pregnancy-home-visit-week${week}`,\n  start,\n  end,\n  dueDate: function (event, contact, report) {\n    const recentLMPDate = getMostRecentLMPDateForPregnancy(contact, report);\n    if (recentLMPDate) { return addDays(recentLMPDate, week * 7); }\n    return addDays(report.reported_date, week * 7);\n  }\n});\n\nfunction checkTaskResolvedForHomeVisit(contact, report, event, dueDate) {\n  //delivery form submitted\n  if (report.reported_date < getNewestDeliveryTimestamp(contact)) { return true; }\n\n  //old pregnancy report\n  if (report.reported_date < getNewestPregnancyTimestamp(contact)) { return true; }\n\n  //miscarriage or abortion\n  if (getRecentANCVisitWithEvent(contact, report, 'abortion') || getRecentANCVisitWithEvent(contact, report, 'miscarriage')) { return true; }\n\n  //Due date older than reported day\n  if (dueDate <= getTimeForMidnight(report.reported_date)) { return true; }\n\n  //Tasks cleared\n  if (isPregnancyTaskMuted(contact)) { return true; }\n  const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date);\n  const endTime = addDays(dueDate, event.end + 1).getTime();\n  return isFormArraySubmittedInWindow(contact.reports, ['pregnancy_home_visit'], startTime, endTime);\n}\n\nmodule.exports = [\n\n  //ANC Home Visit: 12, 20, 26, 30, 34, 36, 38, 40 weeks (Known LMP)\n  {\n    name: 'anc.pregnancy_home_visit.known_lmp',\n    icon: 'icon-pregnancy',\n    title: 'task.anc.pregnancy_home_visit.title',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      // If LMP date is known\n      return !!getMostRecentLMPDateForPregnancy(contact, report);\n    },\n\n    resolvedIf: checkTaskResolvedForHomeVisit,\n\n    actions: [\n      {\n        type: 'report',\n        form: 'pregnancy_home_visit',\n        label: 'Pregnancy home visit'\n      }\n    ],\n    events: [\n      generateEventForHomeVisit(12, 7, 14),\n      generateEventForHomeVisit(20, 7, 14),\n      generateEventForHomeVisit(26, 7, 14),\n      generateEventForHomeVisit(30, 7, 14),\n      generateEventForHomeVisit(34, 6, 7),\n      generateEventForHomeVisit(36, 6, 7),\n      generateEventForHomeVisit(38, 6, 7),\n      generateEventForHomeVisit(40, 6, 7)\n    ]\n  },\n\n  //ANC Home Visit: show every 2 weeks (Unknown LMP)\n  {\n    name: 'anc.pregnancy_home_visit.unknown_lmp',\n    icon: 'icon-pregnancy',\n    title: 'task.anc.pregnancy_home_visit.title',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {// If LMP date is unknown\n      const recentLMP = getMostRecentLMPDateForPregnancy(contact, report);\n      //We only want to show until 42 weeks + 7 days\n      return !recentLMP && addDays(report.reported_date, MAX_DAYS_IN_PREGNANCY + 7) >= today;\n    },\n\n    resolvedIf: checkTaskResolvedForHomeVisit,\n\n    actions: [\n      {\n        type: 'report',\n        form: 'pregnancy_home_visit',\n        label: 'Pregnancy home visit'\n      }\n    ],\n    //every two weeks from reported date until 42nd week, show before due date: 6 days, show after due date: 7 days\n    events: [...Array(21).keys()].map(i => generateEventForHomeVisit((i + 1) * 2, 6, 7))\n  },\n\n  //ANC - Health Facility Visit Reminder\n  {\n    name: 'anc.facility_reminder',\n    icon: 'icon-pregnancy',\n    title: 'task.anc.facility_reminder.title',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy', 'pregnancy_home_visit'],\n    appliesIf: function (contact, report) {\n      //next pregnancy visit date is entered\n      return getField(report, 't_pregnancy_follow_up_date');\n    },\n\n    resolvedIf: function (contact, report, event, dueDate) {\n      //(refused or migrated) and cleared tasks \n      if (isPregnancyTaskMuted(contact)) { return true; }\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date);\n      const endTime = addDays(dueDate, event.end + 1).getTime();\n      return isFormArraySubmittedInWindow(contact.reports, ['pregnancy_facility_visit_reminder'], startTime, endTime);\n\n    },\n    actions: [{\n      type: 'report',\n      form: 'pregnancy_facility_visit_reminder',\n      label: 'Pregnancy facility visit reminder',\n      modifyContent: function (content, contact, report) {\n        content.source_visit_date = getField(report, 't_pregnancy_follow_up_date');\n      }\n    }],\n    events: [{\n      id: 'pregnancy-facility-visit-reminder',\n      start: 3,\n      end: 7,\n      dueDate: function (event, contact, report) {\n        //next visit date\n        return getDateISOLocal(getField(report, 't_pregnancy_follow_up_date'));\n      }\n    }\n    ]\n  },\n\n  {\n    name: 'anc.pregnancy_danger_sign_followup',\n    icon: 'icon-pregnancy-danger',\n    title: 'task.anc.pregnancy_danger_sign_followup.title',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy', 'pregnancy_home_visit', 'pregnancy_danger_sign', 'pregnancy_danger_sign_follow_up'],\n    appliesIf: function (contact, report) {\n      return getField(report, 't_danger_signs_referral_follow_up') === 'yes' && isAlive(contact);\n    },\n    resolvedIf: function (contact, report, event, dueDate) {\n      //(refused or migrated) and cleared tasks \n      if (isPregnancyTaskMuted(contact)) { return true; }\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date + 1);\n      const endTime = addDays(dueDate, event.end + 1).getTime();\n      return isFormArraySubmittedInWindow(contact.reports, ['pregnancy_danger_sign_follow_up'], startTime, endTime);\n    },\n    actions: [\n      {\n        type: 'report',\n        form: 'pregnancy_danger_sign_follow_up'\n      }\n    ],\n    events: [\n      {\n        id: 'pregnancy-danger-sign-follow-up',\n        start: 3,\n        end: 7,\n        dueDate: function (event, contact, report) {\n          return getDateISOLocal(getField(report, 't_danger_signs_referral_follow_up_date'));\n        }\n      }\n    ]\n  },\n\n  {\n    name: 'anc.delivery',\n    icon: 'icon-mother-child',\n    title: 'task.anc.delivery.title',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      const lmpDate = getMostRecentLMPDateForPregnancy(contact, report);\n      //only for known LMP, show for maximum of 42 + 6 weeks\n      return lmpDate && addDays(lmpDate, 336) >= today && isAlive(contact);\n    },\n    resolvedIf: function (contact, report, event, dueDate) {\n      //miscarriage or abortion\n      if (getRecentANCVisitWithEvent(contact, report, 'abortion') || getRecentANCVisitWithEvent(contact, report, 'miscarriage')) { return true; }\n\n      //(refused or migrated) and cleared tasks \n      if (isPregnancyTaskMuted(contact)) { return true; }\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date);\n      const endTime = addDays(dueDate, event.end + 1).getTime();\n      return isFormArraySubmittedInWindow(contact.reports, ['delivery'], startTime, endTime);\n    },\n    actions: [\n      {\n        type: 'report',\n        form: 'delivery'\n      }\n    ],\n    events: [\n      {\n        id: 'delivery-reminder',\n        start: 4 * 7,\n        end: 6 * 7,\n        dueDate: function (event, contact, report) {\n          return addDays(getMostRecentLMPDateForPregnancy(contact, report), MAX_DAYS_IN_PREGNANCY); //LMP + 42 weeks\n        }\n      }\n    ]\n  },\n\n  {\n    name: 'pnc.danger_sign_followup_mother',\n    icon: 'icon-follow-up',\n    title: 'task.pnc.danger_sign_followup_mother.title',\n    appliesTo: 'reports',\n    appliesToType: ['delivery', 'pnc_danger_sign_follow_up_mother'],\n    appliesIf: function (contact, report) {\n      return getField(report, 't_danger_signs_referral_follow_up') === 'yes' && isAlive(contact);\n    },\n    resolvedIf: function (contact, report, event, dueDate) {\n      //(refused or migrated) and cleared tasks\n      if (isPregnancyTaskMuted(contact)) { return true; }\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date + 1);//+1 so that source ds_follow_up does not resolve itself;\n      const endTime = addDays(dueDate, event.end + 1).getTime();\n      return isFormArraySubmittedInWindow(contact.reports, ['pnc_danger_sign_follow_up_mother'], startTime, endTime);\n    },\n    actions: [\n      {\n        type: 'report',\n        form: 'pnc_danger_sign_follow_up_mother',\n        modifyContent: function (content, contact, report) {\n          if (isDeliveryForm(report)) {\n            content.delivery_uuid = report._id;\n          }\n          else {\n            content.delivery_uuid = getField(report, 'inputs.delivery_uuid');\n          }\n        }\n      }\n    ],\n    events: [\n      {\n        id: 'pnc-danger-sign-follow-up-mother',\n        start: 3,\n        end: 7,\n        dueDate: function (event, contact, report) {\n          return getDateISOLocal(getField(report, 't_danger_signs_referral_follow_up_date'));\n        }\n      }\n    ]\n  },\n\n  {\n    name: 'pnc.danger_sign_followup_baby.from_contact',\n    icon: 'icon-follow-up',\n    title: 'task.pnc.danger_sign_followup_baby.title',\n    appliesTo: 'contacts',\n    appliesToType: ['person'],\n    appliesIf: function (contact) {\n      return contact.contact &&\n        contact.contact.t_danger_signs_referral_follow_up === 'yes' &&\n        isAlive(contact);\n    },\n    resolvedIf: function (contact, report, event, dueDate) {\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), contact.contact.reported_date);\n      const endTime = addDays(dueDate, event.end).getTime();\n      return isFormArraySubmittedInWindow(contact.reports, ['pnc_danger_sign_follow_up_baby'], startTime, endTime);\n    },\n    actions: [\n      {\n        type: 'report',\n        form: 'pnc_danger_sign_follow_up_baby',\n        modifyContent: function (content, contact) {\n          content.delivery_uuid = contact.contact.created_by_doc;\n        }\n      }\n    ],\n    events: [\n      {\n        id: 'pnc-danger-sign-follow-up-baby',\n        start: 3,\n        end: 7,\n        dueDate: function (event, contact) {\n          return getDateISOLocal(contact.contact.t_danger_signs_referral_follow_up_date);\n        }\n      }\n    ]\n  },\n\n  {\n    name: 'pnc.danger_sign_followup_baby.from_report',\n    icon: 'icon-follow-up',\n    title: 'task.pnc.danger_sign_followup_baby.title',\n    appliesTo: 'reports',\n    appliesToType: ['pnc_danger_sign_follow_up_baby'],\n    appliesIf: function (contact, report) {\n      return getField(report, 't_danger_signs_referral_follow_up') === 'yes' && isAlive(contact);\n    },\n    resolvedIf: function (contact, report, event, dueDate) {\n      //(refused or migrated) and cleared tasks \n      if (isPregnancyTaskMuted(contact)) { return true; }\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date + 1);\n      //reported_date + 1 so that source ds_follow_up does not resolve itself\n      const endTime = addDays(dueDate, event.end + 1).getTime();\n      return isFormArraySubmittedInWindow(contact.reports, ['pnc_danger_sign_follow_up_baby'], startTime, endTime);\n    },\n    actions: [\n      {\n        type: 'report',\n        form: 'pnc_danger_sign_follow_up_baby',\n        modifyContent: function (content, contact, report) {\n          content.delivery_uuid = getField(report, 'inputs.delivery_uuid');\n        }\n      }\n    ],\n    events: [\n      {\n        id: 'pnc-danger-sign-follow-up-baby',\n        start: 3,\n        end: 7,\n        dueDate: function (event, contact, report) {\n          return getDateISOLocal(getField(report, 't_danger_signs_referral_follow_up_date'));\n        }\n      }\n    ]\n  },\n\n  // RD Toolkit\n  {\n    name: 'task_rdtoolkit_capture',\n    icon: 'icon-healthcare-immunization@2x',\n    title: 'task.rdtoolkit.capture.title',\n    appliesTo: 'reports',\n    appliesToType: ['rdtoolkit_provision'],\n    appliesIf: function (contact, report) {\n      return !!(getField(report, 'patient_id') && getField(report, 'rdtoolkit_provision_session_id'));\n    },\n    resolvedIf: function (contact, report, event, dueDate) {\n      if (!contact.reports && contact.reports.length()) {\n        return false;\n      }\n\n      const captureReport = contact.reports.find(reportDoc => {\n        const captureSessionId = getField(reportDoc, 'rdtoolkit_capture_session_id');\n        const provisionSessionId = getField(report, 'rdtoolkit_provision_session_id');\n        return captureSessionId === provisionSessionId;\n      });\n\n      if (!getField(captureReport, 'rdtoolkit_capture_results')) {\n        return false;\n      }\n\n      const startTime = Math.max(addDays(dueDate, -event.start).getTime(), report.reported_date + 1);\n      const endTime = addDays(dueDate, event.end + 1).getTime();\n\n      return isFormArraySubmittedInWindow(contact.reports, ['rdtoolkit_capture'], startTime, endTime);\n    },\n    actions: [\n      {\n        type: 'report',\n        form: 'rdtoolkit_capture',\n        modifyContent: function(content, contact, report) {\n          content.patient_uuid = getField(report, 'patient_uuid');\n          content.patient_name = getField(report, 'patient_name');\n          content.patient_id = getField(report, 'patient_id');\n          content.rdtoolkit_capture_session_id = getField(report, 'rdtoolkit_provision_session_id');\n        }\n      }\n    ],\n    events: [\n      {\n        id: 'event_rdtoolkit_capture',\n        start: 1,\n        end: 2,\n        days: 1\n      }\n    ]\n  }\n];\n\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nconst extras = __webpack_require__(0);\nconst {\n  isAlive,\n  getSubsequentPregnancyFollowUps,\n  getMostRecentLMPDateForPregnancy,\n  isActivePregnancy,\n  countANCFacilityVisits,\n  getField\n} = extras;\n\nmodule.exports = [\n\n  {\n    id: 'deaths-this-month',\n    type: 'count',\n    icon: 'icon-death-general',\n    goal: 0,\n    translation_key: 'targets.death_reporting.deaths.title',\n    subtitle_translation_key: 'targets.this_month.subtitle',\n    appliesTo: 'contacts',\n    appliesToType: ['person'],\n    appliesIf: function (contact) {\n      return !isAlive(contact);\n    },\n    date: (contact) => contact.contact.date_of_death\n  },\n\n  // ANC: New Pregnancies as a count - this month with LMP, with a goal of 20\n  {\n    id: 'pregnancy-registrations-this-month',\n    type: 'count',\n    icon: 'icon-pregnancy',\n    goal: 20,\n    translation_key: 'targets.anc.new_pregnancy_registrations.title',\n    subtitle_translation_key: 'targets.this_month.subtitle',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      if (!report) {return false;}\n      return getMostRecentLMPDateForPregnancy(contact, report);\n    },\n    date: 'reported',\n    idType: 'contact'\n  },\n\n  {\n    id: 'births-this-month',\n    type: 'count',\n    icon: 'icon-infant',\n    goal: -1,\n    translation_key: 'targets.births.title',\n    subtitle_translation_key: 'targets.this_month.subtitle',\n    appliesTo: 'contacts',\n    appliesToType: ['person'],\n    appliesIf: function (contact) {\n      return !!contact;\n    },\n    date: (contact) => contact.contact.date_of_birth,\n    dhis: {\n      dataElement: 'kB0ZBFisE0e',\n    }\n  },\n\n\n  // ANC: Number of active pregnancies as a count - all time\n  {\n    id: 'active-pregnancies',\n    type: 'count',\n    icon: 'icon-pregnancy',\n    goal: -1,\n    translation_key: 'targets.anc.active_pregnancies.title',\n    subtitle_translation_key: 'targets.all_time.subtitle',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      return isActivePregnancy(contact, report);\n    },\n    date: 'now',\n    idType: 'contact'\n  },\n\n  // ANC: Number of active pregnancies as a count - all time - with 1+ facility visits\n  {\n    id: 'active-pregnancies-1+-visits',\n    type: 'count',\n    icon: 'icon-clinic',\n    goal: -1,\n    translation_key: 'targets.anc.active_pregnancies_1p_visits.title',\n    subtitle_translation_key: 'targets.all_time.subtitle',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      if (!isActivePregnancy(contact, report)) {return false;}\n      const visitCount = countANCFacilityVisits(contact, report);\n      return visitCount > 0;\n    },\n    date: 'now',\n    idType: 'contact'\n  },\n\n  {\n    id: 'facility-deliveries',\n    type: 'percent',\n    icon: 'icon-mother-child',\n    goal: -1,\n    translation_key: 'targets.anc.facility_deliveries.title',\n    subtitle_translation_key: 'targets.all_time.subtitle',\n    appliesTo: 'reports',\n    appliesToType: ['delivery'],\n    appliesIf: function (contact, report) {\n      return getField(report, 'delivery_outcome.delivery_place');\n    },\n    passesIf: function (contact, report) {\n      return getField(report, 'delivery_outcome.delivery_place') === 'health_facility';\n    },\n    date: 'now',\n    idType: 'contact',\n    dhis: {\n      dataElement: 'e22tIwy1nKR',\n      categoryOptionCombo: 'HllvX50cXC0',\n      attributeOptionCombo: 'HllvX50cXC0',\n    }\n  },\n\n  {\n    id: 'active-pregnancies-4+-visits',\n    type: 'count',\n    icon: 'icon-clinic',\n    goal: -1,\n    translation_key: 'targets.anc.active_pregnancies_4p_visits.title',\n    subtitle_translation_key: 'targets.all_time.subtitle',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      if (!isActivePregnancy(contact, report)) {return false;}\n      const visitCount = countANCFacilityVisits(contact, report);\n      return visitCount > 3;\n    },\n    date: 'now',\n    idType: 'contact'\n  },\n  {\n    id: 'active-pregnancies-8+-contacts',\n    type: 'count',\n    icon: 'icon-follow-up',\n    goal: -1,\n    translation_key: 'targets.anc.active_pregnancies_8p_contacts.title',\n    subtitle_translation_key: 'targets.all_time.subtitle',\n    appliesTo: 'reports',\n    appliesToType: ['pregnancy'],\n    appliesIf: function (contact, report) {\n      if (!isActivePregnancy(contact, report)) {return false;}\n      const pregnancyRegistrationCount = 1;\n      const pregnancyHomeVisitCount = getSubsequentPregnancyFollowUps(contact, report).length || 0;\n      const facilityVisitCount = countANCFacilityVisits(contact, report) || 0;\n      return pregnancyRegistrationCount + pregnancyHomeVisitCount + facilityVisitCount > 7;\n    },\n    date: 'now',\n    idType: 'contact'\n  },\n\n];\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar prepareDefinition = __webpack_require__(1);\n\nfunction taskEmitter(taskDefinitions, c, Utils, Task, emit) {\n  if (!taskDefinitions) return;\n\n  var taskDefinition, r;\n  for (var idx1 = 0; idx1 < taskDefinitions.length; ++idx1) {\n    taskDefinition = taskDefinitions[idx1];\n    prepareDefinition(taskDefinition);\n\n    switch (taskDefinition.appliesTo) {\n      case 'reports':\n      case 'scheduled_tasks':\n        for (var idx2=0; idx2<c.reports.length; ++idx2) {\n          r = c.reports[idx2];\n          emitTasks(taskDefinition, Utils, Task, emit, c, r);\n        }\n        break;\n      case 'contacts':\n        if (c.contact) {\n          emitTasks(taskDefinition, Utils, Task, emit, c);\n        }\n        break;\n      default:\n        throw new Error('Unrecognised task.appliesTo: ' + taskDefinition.appliesTo);\n    }\n  }\n}\n\nfunction emitTasks(taskDefinition, Utils, Task, emit, c, r) {\n  var i;\n\n  if (taskDefinition.appliesToType) {\n    var type;\n    if (taskDefinition.appliesTo === 'contacts') {\n      if (!c.contact) {\n        // no assigned contact - does not apply\n        return;\n      }\n      type = c.contact.type === 'contact' ? c.contact.contact_type : c.contact.type;\n    } else {\n      if (!r) {\n        // no report - does not apply\n        return;\n      }\n      type = r.form;\n    }\n    if (taskDefinition.appliesToType.indexOf(type) === -1) {\n      // does not apply to this type\n      return;\n    }\n  }\n\n  if (taskDefinition.appliesTo !== 'scheduled_tasks' && taskDefinition.appliesIf && !taskDefinition.appliesIf(c, r)) {\n    return;\n  }\n\n  if (taskDefinition.appliesTo === 'scheduled_tasks'){\n    if (r && taskDefinition.appliesIf) {\n      if (!r.scheduled_tasks) {\n        return;\n      }\n\n      for (i = 0; i < r.scheduled_tasks.length; i++) {\n        if (taskDefinition.appliesIf(c, r, i)) {\n          emitForEvents(i);\n        }\n      }\n    }\n  } else {\n    emitForEvents();\n  }\n\n  function obtainContactLabelFromSchedule(taskDefinition, c, r) {\n    var contactLabel;\n    if (typeof taskDefinition.contactLabel === 'function') {\n      contactLabel = taskDefinition.contactLabel(c, r);\n    } else {\n      contactLabel = taskDefinition.contactLabel;\n    }\n  \n    return contactLabel ? { name: contactLabel } : c.contact;\n  }  \n\n  function emitForEvents(scheduledTaskIdx) {\n    var i, dueDate = null, event, priority, task;\n    for (i = 0; i < taskDefinition.events.length; i++) {\n      event = taskDefinition.events[i];\n\n      if (event.dueDate) {\n        dueDate = event.dueDate(event, c, r, scheduledTaskIdx);\n      } else if (r) {\n        if (scheduledTaskIdx !== undefined) {\n          dueDate = new Date(Utils.addDate(new Date(r.scheduled_tasks[scheduledTaskIdx].due), event.days));\n        } else {\n          dueDate = new Date(Utils.addDate(new Date(r.reported_date), event.days));\n        }\n      } else {\n        if (event.dueDate) {\n          dueDate = event.dueDate(event, c);\n        } else {\n          var defaultDueDate = c.contact && c.contact.reported_date ? new Date(c.contact.reported_date) : new Date();\n          dueDate = new Date(Utils.addDate(defaultDueDate, event.days));\n        }\n      }\n\n      if (!Utils.isTimely(dueDate, event)) {\n        continue;\n      }\n\n      task = {\n        // One task instance for each event per form that triggers a task, not per contact\n        // Otherwise they collide when contact has multiple reports of the same form\n        _id: (r ? r._id : c.contact && c.contact._id) + '~' + (event.id || i) + '~' + taskDefinition.name,\n        deleted: !!((c.contact && c.contact.deleted) || r ? r.deleted : false),\n        doc: c,\n        contact: obtainContactLabelFromSchedule(taskDefinition, c, r),\n        icon: taskDefinition.icon,\n        date: dueDate,\n        readyStart: event.start || 0,\n        readyEnd: event.end || 0,\n        title: taskDefinition.title,\n        resolved: taskDefinition.resolvedIf(c, r, event, dueDate, scheduledTaskIdx),\n        actions: taskDefinition.actions.map(initActions),\n      };\n\n      if (scheduledTaskIdx !== undefined) {\n        task._id += '-' + scheduledTaskIdx;\n      }\n\n      priority = taskDefinition.priority;\n      if (typeof priority === 'function') {\n        priority = priority(c, r);\n      }\n\n      if (priority) {\n        task.priority = priority.level;\n        task.priorityLabel = priority.label;\n      }\n\n      emit('task', new Task(task));\n    }\n  }\n\n  function initActions(def) {\n    var appliesToReport = !!r;\n    var content = {\n      source: 'task',\n      source_id: appliesToReport ? r._id : c.contact && c.contact._id,\n      contact: c.contact,\n    };\n\n    if (def.modifyContent) {\n      def.modifyContent(content, c, r);\n    }\n\n    return {\n      type: 'report',\n      form: def.form,\n      label: def.label || 'Follow up',\n      content: content,\n    };\n  }\n}\n\nmodule.exports = taskEmitter;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar prepareDefinition = __webpack_require__(1);\n\nfunction targetEmitter(targets, c, Utils, Target, emit) {\n  for (var idx1 = 0; idx1 < targets.length; ++idx1) {\n    var target = targets[idx1];\n    prepareDefinition(target);\n\n    switch (target.appliesTo) {\n      case 'contacts':\n        emitTargetFor(target, Target, Utils, emit, c);\n        break;\n      case 'reports':\n        for (var idx2 = 0; idx2 < c.reports.length; ++idx2) {\n          var r = c.reports[idx2];\n          emitTargetFor(target, Target, Utils, emit, c, r);\n        }\n        break;\n      default:\n        throw new Error('Unrecognised target.appliesTo: ' + target.appliesTo);\n    }\n  }\n}\n\nfunction determineDate(targetConfig, Utils, c, r) {\n  if (typeof targetConfig.date === 'function') {\n    return targetConfig.date(c, r);\n  }\n  \n  if (targetConfig.date === undefined || targetConfig.date === 'now') {\n    return Utils.now().getTime();\n  }\n\n  if (targetConfig.date === 'reported') {\n    return r ? r.reported_date : c.contact.reported_date;\n  }\n  \n  throw new Error('Unrecognised value for target.date: ' + targetConfig.date);\n}\n\nfunction determineInstanceIds(targetConfig, c, r) {\n  var instanceIds;\n  if (typeof targetConfig.idType === 'function') {\n    instanceIds = targetConfig.idType(c, r);\n  } else if (targetConfig.idType === 'report') {\n    instanceIds = r && r._id;\n  } else {\n    instanceIds = c.contact && c.contact._id;\n  }\n\n  if (!Array.isArray(instanceIds)) {\n    instanceIds = [instanceIds];\n  }\n\n  return instanceIds;\n}\n\nfunction emitTargetFor(targetConfig, Target, Utils, emit, c, r) {\n  var isEmittingForReport = !!r;\n  if (!c.contact) return;\n  var contactType = c.contact.contact_type || c.contact.type;\n  var appliesToKey = isEmittingForReport ? r.form : contactType;\n  if (targetConfig.appliesToType && targetConfig.appliesToType.indexOf(appliesToKey) < 0) return;\n  if (targetConfig.appliesIf && !targetConfig.appliesIf (c, r)) return;\n\n  var instanceDoc = isEmittingForReport ? r : c.contact;\n  var instanceIds = determineInstanceIds(targetConfig, c, r);\n  var pass = !targetConfig.passesIf || !!targetConfig.passesIf(c, r);\n  var date = determineDate(targetConfig, Utils, c, r);\n  var groupBy = targetConfig.groupBy && targetConfig.groupBy(c, r);\n\n  function emitTargetInstance(i) {\n    emit('target', i);\n  }\n\n  for (var i = 0; i < instanceIds.length; ++i) {\n    var instance = new Target({\n      _id: instanceIds[i] + '~' + targetConfig.id,\n      contact: c.contact,\n      deleted: !!instanceDoc.deleted,\n      type: targetConfig.id,\n      pass: pass,\n      groupBy: groupBy,\n      date: date,\n    });\n\n    if (targetConfig.emitCustom) {\n      targetConfig.emitCustom(emitTargetInstance, instance, c, r);\n    } else {\n      emitTargetInstance(instance);\n    }\n  }\n}\n\nmodule.exports = targetEmitter;\n\n\n/***/ })\n/******/ ]); }\n}",
    "targets": {
      "enabled": true,
      "items": [
        {
          "id": "deaths-this-month",
          "type": "count",
          "goal": 0,
          "translation_key": "targets.death_reporting.deaths.title",
          "icon": "icon-death-general",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "pregnancy-registrations-this-month",
          "type": "count",
          "goal": 20,
          "translation_key": "targets.anc.new_pregnancy_registrations.title",
          "icon": "icon-pregnancy",
          "subtitle_translation_key": "targets.this_month.subtitle"
        },
        {
          "id": "births-this-month",
          "type": "count",
          "goal": -1,
          "translation_key": "targets.births.title",
          "icon": "icon-infant",
          "subtitle_translation_key": "targets.this_month.subtitle",
          "dhis": {
            "dataElement": "kB0ZBFisE0e"
          }
        },
        {
          "id": "active-pregnancies",
          "type": "count",
          "goal": -1,
          "translation_key": "targets.anc.active_pregnancies.title",
          "icon": "icon-pregnancy",
          "subtitle_translation_key": "targets.all_time.subtitle"
        },
        {
          "id": "active-pregnancies-1+-visits",
          "type": "count",
          "goal": -1,
          "translation_key": "targets.anc.active_pregnancies_1p_visits.title",
          "icon": "icon-clinic",
          "subtitle_translation_key": "targets.all_time.subtitle"
        },
        {
          "id": "facility-deliveries",
          "type": "percent",
          "goal": -1,
          "translation_key": "targets.anc.facility_deliveries.title",
          "icon": "icon-mother-child",
          "subtitle_translation_key": "targets.all_time.subtitle",
          "dhis": {
            "dataElement": "e22tIwy1nKR",
            "categoryOptionCombo": "HllvX50cXC0",
            "attributeOptionCombo": "HllvX50cXC0"
          }
        },
        {
          "id": "active-pregnancies-4+-visits",
          "type": "count",
          "goal": -1,
          "translation_key": "targets.anc.active_pregnancies_4p_visits.title",
          "icon": "icon-clinic",
          "subtitle_translation_key": "targets.all_time.subtitle"
        },
        {
          "id": "active-pregnancies-8+-contacts",
          "type": "count",
          "goal": -1,
          "translation_key": "targets.anc.active_pregnancies_8p_contacts.title",
          "icon": "icon-follow-up",
          "subtitle_translation_key": "targets.all_time.subtitle"
        }
      ]
    }
  },
  "transitions": {
    "accept_patient_reports": false,
    "conditional_alerts": false,
    "default_responses": false,
    "update_sent_by": false,
    "registration": false,
    "update_clinics": false,
    "update_notifications": false,
    "update_scheduled_reports": false,
    "update_sent_forms": false,
    "generate_patient_id_on_people": true,
    "death_reporting": true
  }
}
